function determineBreakpoint() {
	var breakpoint = "",
		wi = $(window).width();
	return breakpoint = 768 > wi ? "xs" : wi >= 768 && 992 > wi ? "sm" : wi >= 992 && 1200 > wi ? "md" : "lg"
}

function onScreenResize() {
	$(".group img").isLoaded() ? $(".groups-list").equalHeights({
		children: ".group"
	}) : $(".group img").on("load", function() {
		$(".groups-list").equalHeights({
			children: ".group"
		})
	}), $(".event img").isLoaded() ? $(".all-events, .featured-events").equalHeights({
		children: ".event"
	}) : $(".event img").on("load", function() {
		$(".all-events, .featured-events").equalHeights({
			children: ".event"
		})
	}), $(".news img").isLoaded() || 0 == $(".news img").length ? $(".all-news, .featured-news-list").equalHeights({
		children: ".news"
	}) : $(".news img").on("load", function() {
		$(".all-news, .featured-news-list").equalHeights({
			children: ".news"
		})
	}), $(".people-list").equalHeights({
		children: ".person"
	})
}

function isAndroid() {
	var ua = navigator.userAgent.toLowerCase();
	return ua.indexOf("android") > -1
}

function isBlackberry() {
	var ua = navigator.userAgent.toLowerCase();
	return ua.indexOf("blackberry") > -1
}

function isIos() {
	var ua = navigator.userAgent.toLowerCase();
	return ua.match(/(ipad|iphone|ipod)/g)
}

function scrollToDiv(el) {
	$("html,body").animate({
		scrollTop: $(el).offset().top
	})
}

function prependFavicon(el) {
		$(el).prepend('<span class="image favicon"><img src="//www.google.com/s2/favicons?domain=' + el.href + '" alt="" /></span>')
	}! function(b) {
		var c = b(window),
			a = window.matchMedia = window.matchMedia || function(i) {
				var g, e = i.documentElement,
					f = e.firstElementChild || e.firstChild,
					h = i.createElement("body"),
					k = i.createElement("div");
				return k.id = "mq-test-1", k.style.cssText = "position:absolute;top:-100em", h.style.background = "none", h.appendChild(k),
					function(l) {
						return k.innerHTML = '&shy;<style media="' + l + '"> #mq-test-1 { width: 42px; }</style>', e.insertBefore(h, f), g = 42 === k.offsetWidth, h.parentNode.removeChild(h), {
							matches: g,
							media: l
						}
					}
			}(document),
			d = function(f, e) {
				this.$el = b(f), this.$contents = this.$el, this.$home = this.$el.parent(), this.$el.children().length && (this.$contents = this.$el.children(), this.$home = this.$el), this.aliases = b.extend({}, d.aliases, e), this.queries = this.getQueries(), this.check(), c.on("resize:transport", b.proxy(this.check, this))
			};
		d.aliases = {}, d.prototype = {
			ship: function(e) {
				var f = b(e);
				0 === f.length && console.warn("Transport location was not found:", e), f.has(this.$el).length || (this.$contents.appendTo(e), this.$el.trigger("transport", f))
			},
			check: function() {
				for (var f = this.$home, g = this.queries, e = g.length, h = 0; e > h; h++) a(g[h].rule).matches && (f = g[h].element);
				this.ship(f)
			},
			getQueries: function() {
				var f = this.$el.data("transport") || "",
					e = this.aliases;
				return b.map(f.split("|"), function(j) {
					var i = j.split("!"),
						h = i[0],
						g = i[1];
					return h = e[h] || h, {
						rule: h,
						element: g
					}
				})
			}
		}, c.on("resize", function() {
			clearTimeout(d.timeout), d.timeout = setTimeout(function() {
				c.trigger("resize:transport")
			}, 100)
		}), b.fn.transport = function(e) {
			this.each(function() {
				return b(this).data("pluginTransport", new d(this, e))
			})
		}
	}(window.jQuery), + function($) {
		"use strict";

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.collapse"),
					options = $.extend({}, Collapse.DEFAULTS, $this.data(), "object" == typeof option && option);
				!data && options.toggle && "show" == option && (option = !option), data || $this.data("bs.collapse", data = new Collapse(this, options)), "string" == typeof option && data[option]()
			})
		}
		var Collapse = function(element, options) {
			this.$element = $(element), this.options = $.extend({}, Collapse.DEFAULTS, options), this.transitioning = null, this.options.parent && (this.$parent = $(this.options.parent)), this.options.toggle && this.toggle()
		};
		Collapse.VERSION = "3.2.0", Collapse.DEFAULTS = {
			toggle: !0
		}, Collapse.prototype.dimension = function() {
			var hasWidth = this.$element.hasClass("width");
			return hasWidth ? "width" : "height"
		}, Collapse.prototype.show = function() {
			if (!this.transitioning && !this.$element.hasClass("in")) {
				var startEvent = $.Event("show.bs.collapse");
				if (this.$element.trigger(startEvent), !startEvent.isDefaultPrevented()) {
					var actives = this.$parent && this.$parent.find("> .panel > .in");
					if (actives && actives.length) {
						var hasData = actives.data("bs.collapse");
						if (hasData && hasData.transitioning) return;
						Plugin.call(actives, "hide"), hasData || actives.data("bs.collapse", null)
					}
					var dimension = this.dimension();
					this.$element.removeClass("collapse").addClass("collapsing")[dimension](0), this.transitioning = 1;
					var complete = function() {
						this.$element.removeClass("collapsing").addClass("collapse in")[dimension](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse")
					};
					if (!$.support.transition) return complete.call(this);
					var scrollSize = $.camelCase(["scroll", dimension].join("-"));
					this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize])
				}
			}
		}, Collapse.prototype.hide = function() {
			if (!this.transitioning && this.$element.hasClass("in")) {
				var startEvent = $.Event("hide.bs.collapse");
				if (this.$element.trigger(startEvent), !startEvent.isDefaultPrevented()) {
					var dimension = this.dimension();
					this.$element[dimension](this.$element[dimension]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"), this.transitioning = 1;
					var complete = function() {
						this.transitioning = 0, this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")
					};
					return $.support.transition ? void this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(350) : complete.call(this)
				}
			}
		}, Collapse.prototype.toggle = function() {
			this[this.$element.hasClass("in") ? "hide" : "show"]()
		};
		var old = $.fn.collapse;
		$.fn.collapse = Plugin, $.fn.collapse.Constructor = Collapse, $.fn.collapse.noConflict = function() {
			return $.fn.collapse = old, this
		}, $(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(e) {
			var href, $this = $(this),
				target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""),
				$target = $(target),
				data = $target.data("bs.collapse"),
				option = data ? "toggle" : $this.data(),
				parent = $this.attr("data-parent"),
				$parent = parent && $(parent);
			data && data.transitioning || ($parent && $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass("collapsed"), $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed")), Plugin.call($target, option)
		})
	}(jQuery), + function($) {
		"use strict";

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.tab");
				data || $this.data("bs.tab", data = new Tab(this)), "string" == typeof option && data[option]()
			})
		}
		var Tab = function(element) {
			this.element = $(element)
		};
		Tab.VERSION = "3.2.0", Tab.prototype.show = function() {
			var $this = this.element,
				$ul = $this.closest("ul:not(.dropdown-menu)"),
				selector = $this.data("target");
			if (selector || (selector = $this.attr("href"), selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")), !$this.parent("li").hasClass("active")) {
				var previous = $ul.find(".active:last a")[0],
					e = $.Event("show.bs.tab", {
						relatedTarget: previous
					});
				if ($this.trigger(e), !e.isDefaultPrevented()) {
					var $target = $(selector);
					this.activate($this.closest("li"), $ul), this.activate($target, $target.parent(), function() {
						$this.trigger({
							type: "shown.bs.tab",
							relatedTarget: previous
						})
					})
				}
			}
		}, Tab.prototype.activate = function(element, container, callback) {
			function next() {
				$active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"), element.addClass("active"), transition ? (element[0].offsetWidth, element.addClass("in")) : element.removeClass("fade"), element.parent(".dropdown-menu") && element.closest("li.dropdown").addClass("active"), callback && callback()
			}
			var $active = container.find("> .active"),
				transition = callback && $.support.transition && $active.hasClass("fade");
			transition ? $active.one("bsTransitionEnd", next).emulateTransitionEnd(150) : next(), $active.removeClass("in")
		};
		var old = $.fn.tab;
		$.fn.tab = Plugin, $.fn.tab.Constructor = Tab, $.fn.tab.noConflict = function() {
			return $.fn.tab = old, this
		}, $(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
			e.preventDefault(), Plugin.call($(this), "show")
		})
	}(jQuery), + function($) {
		"use strict";

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.alert");
				data || $this.data("bs.alert", data = new Alert(this)), "string" == typeof option && data[option].call($this)
			})
		}
		var dismiss = '[data-dismiss="alert"]',
			Alert = function(el) {
				$(el).on("click", dismiss, this.close)
			};
		Alert.VERSION = "3.2.0", Alert.prototype.close = function(e) {
			function removeElement() {
				$parent.detach().trigger("closed.bs.alert").remove()
			}
			var $this = $(this),
				selector = $this.attr("data-target");
			selector || (selector = $this.attr("href"), selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ""));
			var $parent = $(selector);
			e && e.preventDefault(), $parent.length || ($parent = $this.hasClass("alert") ? $this : $this.parent()), $parent.trigger(e = $.Event("close.bs.alert")), e.isDefaultPrevented() || ($parent.removeClass("in"), $.support.transition && $parent.hasClass("fade") ? $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(150) : removeElement())
		};
		var old = $.fn.alert;
		$.fn.alert = Plugin, $.fn.alert.Constructor = Alert, $.fn.alert.noConflict = function() {
			return $.fn.alert = old, this
		}, $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close)
	}(jQuery), + function($) {
		"use strict";

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.tooltip"),
					options = "object" == typeof option && option;
				(data || "destroy" != option) && (data || $this.data("bs.tooltip", data = new Tooltip(this, options)), "string" == typeof option && data[option]())
			})
		}
		var Tooltip = function(element, options) {
			this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null, this.init("tooltip", element, options)
		};
		Tooltip.VERSION = "3.2.0", Tooltip.DEFAULTS = {
			animation: !0,
			placement: "top",
			selector: !1,
			template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
			trigger: "hover focus",
			title: "",
			delay: 0,
			html: !1,
			container: !1,
			viewport: {
				selector: "body",
				padding: 0
			}
		}, Tooltip.prototype.init = function(type, element, options) {
			this.enabled = !0, this.type = type, this.$element = $(element), this.options = this.getOptions(options), this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport);
			for (var triggers = this.options.trigger.split(" "), i = triggers.length; i--;) {
				var trigger = triggers[i];
				if ("click" == trigger) this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
				else if ("manual" != trigger) {
					var eventIn = "hover" == trigger ? "mouseenter" : "focusin",
						eventOut = "hover" == trigger ? "mouseleave" : "focusout";
					this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this)), this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this))
				}
			}
			this.options.selector ? this._options = $.extend({}, this.options, {
				trigger: "manual",
				selector: ""
			}) : this.fixTitle()
		}, Tooltip.prototype.getDefaults = function() {
			return Tooltip.DEFAULTS
		}, Tooltip.prototype.getOptions = function(options) {
			return options = $.extend({}, this.getDefaults(), this.$element.data(), options), options.delay && "number" == typeof options.delay && (options.delay = {
				show: options.delay,
				hide: options.delay
			}), options
		}, Tooltip.prototype.getDelegateOptions = function() {
			var options = {},
				defaults = this.getDefaults();
			return this._options && $.each(this._options, function(key, value) {
				defaults[key] != value && (options[key] = value)
			}), options
		}, Tooltip.prototype.enter = function(obj) {
			var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
			return self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), clearTimeout(self.timeout), self.hoverState = "in", self.options.delay && self.options.delay.show ? void(self.timeout = setTimeout(function() {
				"in" == self.hoverState && self.show()
			}, self.options.delay.show)) : self.show()
		}, Tooltip.prototype.leave = function(obj) {
			var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
			return self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), clearTimeout(self.timeout), self.hoverState = "out", self.options.delay && self.options.delay.hide ? void(self.timeout = setTimeout(function() {
				"out" == self.hoverState && self.hide()
			}, self.options.delay.hide)) : self.hide()
		}, Tooltip.prototype.show = function() {
			var e = $.Event("show.bs." + this.type);
			if (this.hasContent() && this.enabled) {
				this.$element.trigger(e);
				var inDom = $.contains(document.documentElement, this.$element[0]);
				if (e.isDefaultPrevented() || !inDom) return;
				var that = this,
					$tip = this.tip(),
					tipId = this.getUID(this.type);
				this.setContent(), $tip.attr("id", tipId), this.$element.attr("aria-describedby", tipId), this.options.animation && $tip.addClass("fade");
				var placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement,
					autoToken = /\s?auto?\s?/i,
					autoPlace = autoToken.test(placement);
				autoPlace && (placement = placement.replace(autoToken, "") || "top"), $tip.detach().css({
					top: 0,
					left: 0,
					display: "block"
				}).addClass(placement).data("bs." + this.type, this), this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
				var pos = this.getPosition(),
					actualWidth = $tip[0].offsetWidth,
					actualHeight = $tip[0].offsetHeight;
				if (autoPlace) {
					var orgPlacement = placement,
						$parent = this.$element.parent(),
						parentDim = this.getPosition($parent);
					placement = "bottom" == placement && pos.top + pos.height + actualHeight - parentDim.scroll > parentDim.height ? "top" : "top" == placement && pos.top - parentDim.scroll - actualHeight < 0 ? "bottom" : "right" == placement && pos.right + actualWidth > parentDim.width ? "left" : "left" == placement && pos.left - actualWidth < parentDim.left ? "right" : placement, $tip.removeClass(orgPlacement).addClass(placement)
				}
				var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
				this.applyPlacement(calculatedOffset, placement);
				var complete = function() {
					that.$element.trigger("shown.bs." + that.type), that.hoverState = null
				};
				$.support.transition && this.$tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(150) : complete()
			}
		}, Tooltip.prototype.applyPlacement = function(offset, placement) {
			var $tip = this.tip(),
				width = $tip[0].offsetWidth,
				height = $tip[0].offsetHeight,
				marginTop = parseInt($tip.css("margin-top"), 10),
				marginLeft = parseInt($tip.css("margin-left"), 10);
			isNaN(marginTop) && (marginTop = 0), isNaN(marginLeft) && (marginLeft = 0), offset.top = offset.top + marginTop, offset.left = offset.left + marginLeft, $.offset.setOffset($tip[0], $.extend({
				using: function(props) {
					$tip.css({
						top: Math.round(props.top),
						left: Math.round(props.left)
					})
				}
			}, offset), 0), $tip.addClass("in");
			var actualWidth = $tip[0].offsetWidth,
				actualHeight = $tip[0].offsetHeight;
			"top" == placement && actualHeight != height && (offset.top = offset.top + height - actualHeight);
			var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
			delta.left ? offset.left += delta.left : offset.top += delta.top;
			var arrowDelta = delta.left ? 2 * delta.left - width + actualWidth : 2 * delta.top - height + actualHeight,
				arrowPosition = delta.left ? "left" : "top",
				arrowOffsetPosition = delta.left ? "offsetWidth" : "offsetHeight";
			$tip.offset(offset), this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition)
		}, Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
			this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "")
		}, Tooltip.prototype.setContent = function() {
			var $tip = this.tip(),
				title = this.getTitle();
			$tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title), $tip.removeClass("fade in top bottom left right")
		}, Tooltip.prototype.hide = function() {
			function complete() {
				"in" != that.hoverState && $tip.detach(), that.$element.trigger("hidden.bs." + that.type)
			}
			var that = this,
				$tip = this.tip(),
				e = $.Event("hide.bs." + this.type);
			return this.$element.removeAttr("aria-describedby"), this.$element.trigger(e), e.isDefaultPrevented() ? void 0 : ($tip.removeClass("in"), $.support.transition && this.$tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(150) : complete(), this.hoverState = null, this)
		}, Tooltip.prototype.fixTitle = function() {
			var $e = this.$element;
			($e.attr("title") || "string" != typeof $e.attr("data-original-title")) && $e.attr("data-original-title", $e.attr("title") || "").attr("title", "")
		}, Tooltip.prototype.hasContent = function() {
			return this.getTitle()
		}, Tooltip.prototype.getPosition = function($element) {
			$element = $element || this.$element;
			var el = $element[0],
				isBody = "BODY" == el.tagName;
			return $.extend({}, "function" == typeof el.getBoundingClientRect ? el.getBoundingClientRect() : null, {
				scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
				width: isBody ? $(window).width() : $element.outerWidth(),
				height: isBody ? $(window).height() : $element.outerHeight()
			}, isBody ? {
				top: 0,
				left: 0
			} : $element.offset())
		}, Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
			return "bottom" == placement ? {
				top: pos.top + pos.height,
				left: pos.left + pos.width / 2 - actualWidth / 2
			} : "top" == placement ? {
				top: pos.top - actualHeight,
				left: pos.left + pos.width / 2 - actualWidth / 2
			} : "left" == placement ? {
				top: pos.top + pos.height / 2 - actualHeight / 2,
				left: pos.left - actualWidth
			} : {
				top: pos.top + pos.height / 2 - actualHeight / 2,
				left: pos.left + pos.width
			}
		}, Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
			var delta = {
				top: 0,
				left: 0
			};
			if (!this.$viewport) return delta;
			var viewportPadding = this.options.viewport && this.options.viewport.padding || 0,
				viewportDimensions = this.getPosition(this.$viewport);
			if (/right|left/.test(placement)) {
				var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll,
					bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
				topEdgeOffset < viewportDimensions.top ? delta.top = viewportDimensions.top - topEdgeOffset : bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height && (delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset)
			} else {
				var leftEdgeOffset = pos.left - viewportPadding,
					rightEdgeOffset = pos.left + viewportPadding + actualWidth;
				leftEdgeOffset < viewportDimensions.left ? delta.left = viewportDimensions.left - leftEdgeOffset : rightEdgeOffset > viewportDimensions.width && (delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset)
			}
			return delta
		}, Tooltip.prototype.getTitle = function() {
			var title, $e = this.$element,
				o = this.options;
			return title = $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title)
		}, Tooltip.prototype.getUID = function(prefix) {
			do prefix += ~~(1e6 * Math.random()); while (document.getElementById(prefix));
			return prefix
		}, Tooltip.prototype.tip = function() {
			return this.$tip = this.$tip || $(this.options.template)
		}, Tooltip.prototype.arrow = function() {
			return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
		}, Tooltip.prototype.validate = function() {
			this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
		}, Tooltip.prototype.enable = function() {
			this.enabled = !0
		}, Tooltip.prototype.disable = function() {
			this.enabled = !1
		}, Tooltip.prototype.toggleEnabled = function() {
			this.enabled = !this.enabled
		}, Tooltip.prototype.toggle = function(e) {
			var self = this;
			e && (self = $(e.currentTarget).data("bs." + this.type), self || (self = new this.constructor(e.currentTarget, this.getDelegateOptions()), $(e.currentTarget).data("bs." + this.type, self))), self.tip().hasClass("in") ? self.leave(self) : self.enter(self)
		}, Tooltip.prototype.destroy = function() {
			clearTimeout(this.timeout), this.hide().$element.off("." + this.type).removeData("bs." + this.type)
		};
		var old = $.fn.tooltip;
		$.fn.tooltip = Plugin, $.fn.tooltip.Constructor = Tooltip, $.fn.tooltip.noConflict = function() {
			return $.fn.tooltip = old, this
		}
	}(jQuery), + function($) {
		"use strict";

		function Plugin(option, _relatedTarget) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.modal"),
					options = $.extend({}, Modal.DEFAULTS, $this.data(), "object" == typeof option && option);
				data || $this.data("bs.modal", data = new Modal(this, options)), "string" == typeof option ? data[option](_relatedTarget) : options.show && data.show(_relatedTarget)
			})
		}
		var Modal = function(element, options) {
			this.options = options, this.$body = $(document.body), this.$element = $(element), this.$backdrop = this.isShown = null, this.scrollbarWidth = 0, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
				this.$element.trigger("loaded.bs.modal")
			}, this))
		};
		Modal.VERSION = "3.2.0", Modal.DEFAULTS = {
			backdrop: !0,
			keyboard: !0,
			show: !0
		}, Modal.prototype.toggle = function(_relatedTarget) {
			return this.isShown ? this.hide() : this.show(_relatedTarget)
		}, Modal.prototype.show = function(_relatedTarget) {
			var that = this,
				e = $.Event("show.bs.modal", {
					relatedTarget: _relatedTarget
				});
			this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.$body.addClass("modal-open"), this.setScrollbar(), this.escape(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this)), this.backdrop(function() {
				var transition = $.support.transition && that.$element.hasClass("fade");
				that.$element.parent().length || that.$element.appendTo(that.$body), that.$element.show().scrollTop(0), transition && that.$element[0].offsetWidth, that.$element.addClass("in").attr("aria-hidden", !1), that.enforceFocus();
				var e = $.Event("shown.bs.modal", {
					relatedTarget: _relatedTarget
				});
				transition ? that.$element.find(".modal-dialog").one("bsTransitionEnd", function() {
					that.$element.trigger("focus").trigger(e)
				}).emulateTransitionEnd(300) : that.$element.trigger("focus").trigger(e)
			}))
		}, Modal.prototype.hide = function(e) {
			e && e.preventDefault(), e = $.Event("hide.bs.modal"), this.$element.trigger(e), this.isShown && !e.isDefaultPrevented() && (this.isShown = !1, this.$body.removeClass("modal-open"), this.resetScrollbar(), this.escape(), $(document).off("focusin.bs.modal"), this.$element.removeClass("in").attr("aria-hidden", !0).off("click.dismiss.bs.modal"), $.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal())
		}, Modal.prototype.enforceFocus = function() {
			$(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
				this.$element[0] === e.target || this.$element.has(e.target).length || this.$element.trigger("focus")
			}, this))
		}, Modal.prototype.escape = function() {
			this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.bs.modal", $.proxy(function(e) {
				27 == e.which && this.hide()
			}, this)) : this.isShown || this.$element.off("keyup.dismiss.bs.modal")
		}, Modal.prototype.hideModal = function() {
			var that = this;
			this.$element.hide(), this.backdrop(function() {
				that.$element.trigger("hidden.bs.modal")
			})
		}, Modal.prototype.removeBackdrop = function() {
			this.$backdrop && this.$backdrop.remove(), this.$backdrop = null
		}, Modal.prototype.backdrop = function(callback) {
			var that = this,
				animate = this.$element.hasClass("fade") ? "fade" : "";
			if (this.isShown && this.options.backdrop) {
				var doAnimate = $.support.transition && animate;
				if (this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", $.proxy(function(e) {
						e.target === e.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this))
					}, this)), doAnimate && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !callback) return;
				doAnimate ? this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(150) : callback()
			} else if (!this.isShown && this.$backdrop) {
				this.$backdrop.removeClass("in");
				var callbackRemove = function() {
					that.removeBackdrop(), callback && callback()
				};
				$.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", callbackRemove).emulateTransitionEnd(150) : callbackRemove()
			} else callback && callback()
		}, Modal.prototype.checkScrollbar = function() {
			document.body.clientWidth >= window.innerWidth || (this.scrollbarWidth = this.scrollbarWidth || this.measureScrollbar())
		}, Modal.prototype.setScrollbar = function() {
			var bodyPad = parseInt(this.$body.css("padding-right") || 0, 10);
			this.scrollbarWidth && this.$body.css("padding-right", bodyPad + this.scrollbarWidth)
		}, Modal.prototype.resetScrollbar = function() {
			this.$body.css("padding-right", "")
		}, Modal.prototype.measureScrollbar = function() {
			var scrollDiv = document.createElement("div");
			scrollDiv.className = "modal-scrollbar-measure", this.$body.append(scrollDiv);
			var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
			return this.$body[0].removeChild(scrollDiv), scrollbarWidth
		};
		var old = $.fn.modal;
		$.fn.modal = Plugin, $.fn.modal.Constructor = Modal, $.fn.modal.noConflict = function() {
			return $.fn.modal = old, this
		}, $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
			var $this = $(this),
				href = $this.attr("href"),
				$target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, "")),
				option = $target.data("bs.modal") ? "toggle" : $.extend({
					remote: !/#/.test(href) && href
				}, $target.data(), $this.data());
			$this.is("a") && e.preventDefault(), $target.one("show.bs.modal", function(showEvent) {
				showEvent.isDefaultPrevented() || $target.one("hidden.bs.modal", function() {
					$this.is(":visible") && $this.trigger("focus")
				})
			}), Plugin.call($target, option, this)
		})
	}(jQuery), + function($) {
		"use strict";

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.popover"),
					options = "object" == typeof option && option;
				(data || "destroy" != option) && (data || $this.data("bs.popover", data = new Popover(this, options)), "string" == typeof option && data[option]())
			})
		}
		var Popover = function(element, options) {
			this.init("popover", element, options)
		};
		if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
		Popover.VERSION = "3.2.0", Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
			placement: "right",
			trigger: "click",
			content: "",
			template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
		}), Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype), Popover.prototype.constructor = Popover, Popover.prototype.getDefaults = function() {
			return Popover.DEFAULTS
		}, Popover.prototype.setContent = function() {
			var $tip = this.tip(),
				title = this.getTitle(),
				content = this.getContent();
			$tip.find(".popover-title")[this.options.html ? "html" : "text"](title), $tip.find(".popover-content").empty()[this.options.html ? "string" == typeof content ? "html" : "append" : "text"](content), $tip.removeClass("fade top bottom left right in"), $tip.find(".popover-title").html() || $tip.find(".popover-title").hide()
		}, Popover.prototype.hasContent = function() {
			return this.getTitle() || this.getContent()
		}, Popover.prototype.getContent = function() {
			var $e = this.$element,
				o = this.options;
			return $e.attr("data-content") || ("function" == typeof o.content ? o.content.call($e[0]) : o.content)
		}, Popover.prototype.arrow = function() {
			return this.$arrow = this.$arrow || this.tip().find(".arrow")
		}, Popover.prototype.tip = function() {
			return this.$tip || (this.$tip = $(this.options.template)), this.$tip
		};
		var old = $.fn.popover;
		$.fn.popover = Plugin, $.fn.popover.Constructor = Popover, $.fn.popover.noConflict = function() {
			return $.fn.popover = old, this
		}
	}(jQuery), + function($) {
		"use strict";

		function clearMenus(e) {
			e && 3 === e.which || ($(backdrop).remove(), $(toggle).each(function() {
				var $parent = getParent($(this)),
					relatedTarget = {
						relatedTarget: this
					};
				$parent.hasClass("open") && ($parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget)), e.isDefaultPrevented() || $parent.removeClass("open").trigger("hidden.bs.dropdown", relatedTarget))
			}))
		}

		function getParent($this) {
			var selector = $this.attr("data-target");
			selector || (selector = $this.attr("href"), selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ""));
			var $parent = selector && $(selector);
			return $parent && $parent.length ? $parent : $this.parent()
		}

		function Plugin(option) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("bs.dropdown");
				data || $this.data("bs.dropdown", data = new Dropdown(this)), "string" == typeof option && data[option].call($this)
			})
		}
		var backdrop = ".dropdown-backdrop",
			toggle = '[data-toggle="dropdown"]',
			Dropdown = function(element) {
				$(element).on("click.bs.dropdown", this.toggle)
			};
		Dropdown.VERSION = "3.2.0", Dropdown.prototype.toggle = function(e) {
			var $this = $(this);
			if (!$this.is(".disabled, :disabled")) {
				var $parent = getParent($this),
					isActive = $parent.hasClass("open");
				if (clearMenus(), !isActive) {
					"ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length && $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus);
					var relatedTarget = {
						relatedTarget: this
					};
					if ($parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget)), e.isDefaultPrevented()) return;
					$this.trigger("focus"), $parent.toggleClass("open").trigger("shown.bs.dropdown", relatedTarget)
				}
				return !1
			}
		}, Dropdown.prototype.keydown = function(e) {
			if (/(38|40|27)/.test(e.keyCode)) {
				var $this = $(this);
				if (e.preventDefault(), e.stopPropagation(), !$this.is(".disabled, :disabled")) {
					var $parent = getParent($this),
						isActive = $parent.hasClass("open");
					if (!isActive || isActive && 27 == e.keyCode) return 27 == e.which && $parent.find(toggle).trigger("focus"), $this.trigger("click");
					var desc = " li:not(.divider):visible a",
						$items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc);
					if ($items.length) {
						var index = $items.index($items.filter(":focus"));
						38 == e.keyCode && index > 0 && index--, 40 == e.keyCode && index < $items.length - 1 && index++, ~index || (index = 0), $items.eq(index).trigger("focus")
					}
				}
			}
		};
		var old = $.fn.dropdown;
		$.fn.dropdown = Plugin, $.fn.dropdown.Constructor = Dropdown, $.fn.dropdown.noConflict = function() {
			return $.fn.dropdown = old, this
		}, $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
			e.stopPropagation()
		}).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle + ', [role="menu"], [role="listbox"]', Dropdown.prototype.keydown)
	}(jQuery),
	function($, window) {
		var Tour, document;
		return document = window.document, Tour = function() {
			function Tour(options) {
				var storage;
				try {
					storage = window.localStorage
				} catch (_error) {
					storage = !1
				}
				this._options = $.extend({
					name: "tour",
					steps: [],
					container: "body",
					keyboard: !0,
					storage: storage,
					debug: !1,
					backdrop: !1,
					redirect: !0,
					orphan: !1,
					duration: !1,
					basePath: "",
					template: "<div class='popover'> <div class='arrow'></div> <h3 class='popover-title'></h3> <div class='popover-content'></div> <div class='popover-navigation'> <div class='btn-group'> <button class='btn btn-sm btn-default' data-role='prev'>&laquo; Prev</button> <button class='btn btn-sm btn-default' data-role='next'>Next &raquo;</button> <button class='btn btn-sm btn-default' data-role='pause-resume' data-pause-text='Pause' data-resume-text='Resume'>Pause</button> </div> <button class='btn btn-sm btn-default' data-role='end'>End tour</button> </div> </div>",
					afterSetState: function() {},
					afterGetState: function() {},
					afterRemoveState: function() {},
					onStart: function() {},
					onEnd: function() {},
					onShow: function() {},
					onShown: function() {},
					onHide: function() {},
					onHidden: function() {},
					onNext: function() {},
					onPrev: function() {},
					onPause: function() {},
					onResume: function() {}
				}, options), this._force = !1, this._inited = !1, this.backdrop = {
					overlay: null,
					$element: null,
					$background: null,
					backgroundShown: !1,
					overlayElementShown: !1
				}
			}
			return Tour.prototype.addSteps = function(steps) {
				var step, _i, _len;
				for (_i = 0, _len = steps.length; _len > _i; _i++) step = steps[_i], this.addStep(step);
				return this
			}, Tour.prototype.addStep = function(step) {
				return this._options.steps.push(step), this
			}, Tour.prototype.getStep = function(i) {
				return null != this._options.steps[i] ? $.extend({
					id: "step-" + i,
					path: "",
					placement: "right",
					title: "",
					content: "<p></p>",
					next: i === this._options.steps.length - 1 ? -1 : i + 1,
					prev: i - 1,
					animation: !0,
					container: this._options.container,
					backdrop: this._options.backdrop,
					redirect: this._options.redirect,
					orphan: this._options.orphan,
					duration: this._options.duration,
					template: this._options.template,
					onShow: this._options.onShow,
					onShown: this._options.onShown,
					onHide: this._options.onHide,
					onHidden: this._options.onHidden,
					onNext: this._options.onNext,
					onPrev: this._options.onPrev,
					onPause: this._options.onPause,
					onResume: this._options.onResume
				}, this._options.steps[i]) : void 0
			}, Tour.prototype.init = function(force) {
				return this._force = force, this.ended() ? (this._debug("Tour ended, init prevented."), this) : (this.setCurrentStep(), this._initMouseNavigation(), this._initKeyboardNavigation(), this._onResize(function(_this) {
						return function() {
							return _this.showStep(_this._current)
						}
					}(this)), null !== this._current && this.showStep(this._current), this._inited = !0,
					this)
			}, Tour.prototype.start = function(force) {
				var promise;
				return null == force && (force = !1), this._inited || this.init(force), null === this._current && (promise = this._makePromise(null != this._options.onStart ? this._options.onStart(this) : void 0), this._callOnPromiseDone(promise, this.showStep, 0)), this
			}, Tour.prototype.next = function() {
				var promise;
				return promise = this.hideStep(this._current), this._callOnPromiseDone(promise, this._showNextStep)
			}, Tour.prototype.prev = function() {
				var promise;
				return promise = this.hideStep(this._current), this._callOnPromiseDone(promise, this._showPrevStep)
			}, Tour.prototype.goTo = function(i) {
				var promise;
				return promise = this.hideStep(this._current), this._callOnPromiseDone(promise, this.showStep, i)
			}, Tour.prototype.end = function() {
				var endHelper, promise;
				return endHelper = function(_this) {
					return function() {
						return $(document).off("click.tour-" + _this._options.name), $(document).off("keyup.tour-" + _this._options.name), $(window).off("resize.tour-" + _this._options.name), _this._setState("end", "yes"), _this._inited = !1, _this._force = !1, _this._clearTimer(), null != _this._options.onEnd ? _this._options.onEnd(_this) : void 0
					}
				}(this), promise = this.hideStep(this._current), this._callOnPromiseDone(promise, endHelper)
			}, Tour.prototype.ended = function() {
				return !this._force && !!this._getState("end")
			}, Tour.prototype.restart = function() {
				return this._removeState("current_step"), this._removeState("end"), this.start()
			}, Tour.prototype.pause = function() {
				var step;
				return step = this.getStep(this._current), step && step.duration ? (this._paused = !0, this._duration -= (new Date).getTime() - this._start, window.clearTimeout(this._timer), this._debug("Paused/Stopped step " + (this._current + 1) + " timer (" + this._duration + " remaining)."), null != step.onPause ? step.onPause(this, this._duration) : void 0) : this
			}, Tour.prototype.resume = function() {
				var step;
				return step = this.getStep(this._current), step && step.duration ? (this._paused = !1, this._start = (new Date).getTime(), this._duration = this._duration || step.duration, this._timer = window.setTimeout(function(_this) {
					return function() {
						return _this._isLast() ? _this.next() : _this.end()
					}
				}(this), this._duration), this._debug("Started step " + (this._current + 1) + " timer with duration " + this._duration), null != step.onResume && this._duration !== step.duration ? step.onResume(this, this._duration) : void 0) : this
			}, Tour.prototype.hideStep = function(i) {
				var hideStepHelper, promise, step;
				return (step = this.getStep(i)) ? (this._clearTimer(), promise = this._makePromise(null != step.onHide ? step.onHide(this, i) : void 0), hideStepHelper = function(_this) {
					return function() {
						var $element;
						return $element = $(step.element), $element.data("bs.popover") || $element.data("popover") || ($element = $("body")), $element.popover("destroy").removeClass("tour-" + _this._options.name + "-element tour-" + _this._options.name + "-" + i + "-element"), step.reflex && $element.css("cursor", "").off("click.tour-" + _this._options.name), step.backdrop && _this._hideBackdrop(), null != step.onHidden ? step.onHidden(_this) : void 0
					}
				}(this), this._callOnPromiseDone(promise, hideStepHelper), promise) : void 0
			}, Tour.prototype.showStep = function(i) {
				var promise, showStepHelper, skipToPrevious, step;
				return this.ended() ? (this._debug("Tour ended, showStep prevented."), this) : (step = this.getStep(i)) ? (skipToPrevious = i < this._current, promise = this._makePromise(null != step.onShow ? step.onShow(this, i) : void 0), showStepHelper = function(_this) {
					return function() {
						var current_path, path;
						if (_this.setCurrentStep(i), path = function() {
								switch ({}.toString.call(step.path)) {
									case "[object Function]":
										return step.path();
									case "[object String]":
										return this._options.basePath + step.path;
									default:
										return step.path
								}
							}.call(_this), current_path = [document.location.pathname, document.location.hash].join(""), _this._isRedirect(path, current_path)) return void _this._redirect(step, path);
						if (_this._isOrphan(step)) {
							if (!step.orphan) return _this._debug("Skip the orphan step " + (_this._current + 1) + ". Orphan option is false and the element doesn't exist or is hidden."), void(skipToPrevious ? _this._showPrevStep() : _this._showNextStep());
							_this._debug("Show the orphan step " + (_this._current + 1) + ". Orphans option is true.")
						}
						return step.backdrop && _this._showBackdrop(_this._isOrphan(step) ? void 0 : step.element), _this._scrollIntoView(step.element, function() {
							return _this.getCurrentStep() === i ? (null != step.element && step.backdrop && _this._showOverlayElement(step.element), _this._showPopover(step, i), null != step.onShown && step.onShown(_this), _this._debug("Step " + (_this._current + 1) + " of " + _this._options.steps.length)) : void 0
						}), step.duration ? _this.resume() : void 0
					}
				}(this), this._callOnPromiseDone(promise, showStepHelper), promise) : void 0
			}, Tour.prototype.getCurrentStep = function() {
				return this._current
			}, Tour.prototype.setCurrentStep = function(value) {
				return null != value ? (this._current = value, this._setState("current_step", value)) : (this._current = this._getState("current_step"), this._current = null === this._current ? null : parseInt(this._current, 10)), this
			}, Tour.prototype._setState = function(key, value) {
				var e, keyName;
				if (this._options.storage) {
					keyName = "" + this._options.name + "_" + key;
					try {
						this._options.storage.setItem(keyName, value)
					} catch (_error) {
						e = _error, e.code === DOMException.QUOTA_EXCEEDED_ERR && this.debug("LocalStorage quota exceeded. State storage failed.")
					}
					return this._options.afterSetState(keyName, value)
				}
				return null == this._state && (this._state = {}), this._state[key] = value
			}, Tour.prototype._removeState = function(key) {
				var keyName;
				return this._options.storage ? (keyName = "" + this._options.name + "_" + key, this._options.storage.removeItem(keyName), this._options.afterRemoveState(keyName)) : null != this._state ? delete this._state[key] : void 0
			}, Tour.prototype._getState = function(key) {
				var keyName, value;
				return this._options.storage ? (keyName = "" + this._options.name + "_" + key, value = this._options.storage.getItem(keyName)) : null != this._state && (value = this._state[key]), (void 0 === value || "null" === value) && (value = null), this._options.afterGetState(key, value), value
			}, Tour.prototype._showNextStep = function() {
				var promise, showNextStepHelper, step;
				return step = this.getStep(this._current), showNextStepHelper = function(_this) {
					return function() {
						return _this.showStep(step.next)
					}
				}(this), promise = this._makePromise(null != step.onNext ? step.onNext(this) : void 0), this._callOnPromiseDone(promise, showNextStepHelper)
			}, Tour.prototype._showPrevStep = function() {
				var promise, showPrevStepHelper, step;
				return step = this.getStep(this._current), showPrevStepHelper = function(_this) {
					return function() {
						return _this.showStep(step.prev)
					}
				}(this), promise = this._makePromise(null != step.onPrev ? step.onPrev(this) : void 0), this._callOnPromiseDone(promise, showPrevStepHelper)
			}, Tour.prototype._debug = function(text) {
				return this._options.debug ? window.console.log("Bootstrap Tour '" + this._options.name + "' | " + text) : void 0
			}, Tour.prototype._isRedirect = function(path, currentPath) {
				return null != path && "" !== path && ("[object RegExp]" === {}.toString.call(path) && !path.test(currentPath) || "[object String]" === {}.toString.call(path) && path.replace(/\?.*$/, "").replace(/\/?$/, "") !== currentPath.replace(/\/?$/, ""))
			}, Tour.prototype._redirect = function(step, path) {
				return $.isFunction(step.redirect) ? step.redirect.call(this, path) : step.redirect === !0 ? (this._debug("Redirect to " + path), document.location.href = path) : void 0
			}, Tour.prototype._isOrphan = function(step) {
				return null == step.element || !$(step.element).length || $(step.element).is(":hidden") && "http://www.w3.org/2000/svg" !== $(step.element)[0].namespaceURI
			}, Tour.prototype._isLast = function() {
				return this._current < this._options.steps.length - 1
			}, Tour.prototype._showPopover = function(step, i) {
				var $element, $navigation, $template, $tip, isOrphan, options;
				return $(".tour-" + this._options.name).remove(), options = $.extend({}, this._options), $template = $($.isFunction(step.template) ? step.template(i, step) : step.template), $navigation = $template.find(".popover-navigation"), isOrphan = this._isOrphan(step), isOrphan && (step.element = "body", step.placement = "top", $template = $template.addClass("orphan")), $element = $(step.element), $template.addClass("tour-" + this._options.name + " tour-" + this._options.name + "-" + i), $element.addClass("tour-" + this._options.name + "-element tour-" + this._options.name + "-" + i + "-element"), step.options && $.extend(options, step.options), step.reflex && !isOrphan && $element.css("cursor", "pointer").on("click.tour-" + this._options.name, function(_this) {
					return function() {
						return _this._isLast() ? _this.next() : _this.end()
					}
				}(this)), step.prev < 0 && $navigation.find("[data-role='prev']").addClass("disabled"), step.next < 0 && $navigation.find("[data-role='next']").addClass("disabled"), step.duration || $navigation.find("[data-role='pause-resume']").remove(), step.template = $template.clone().wrap("<div>").parent().html(), $element.popover({
					placement: step.placement,
					trigger: "manual",
					title: step.title,
					content: step.content,
					html: !0,
					animation: step.animation,
					container: step.container,
					template: step.template,
					selector: step.element
				}).popover("show"), $tip = $element.data("bs.popover") ? $element.data("bs.popover").tip() : $element.data("popover").tip(), $tip.attr("id", step.id), this._reposition($tip, step), isOrphan ? this._center($tip) : void 0
			}, Tour.prototype._reposition = function($tip, step) {
				var offsetBottom, offsetHeight, offsetRight, offsetWidth, originalLeft, originalTop, tipOffset;
				if (offsetWidth = $tip[0].offsetWidth, offsetHeight = $tip[0].offsetHeight, tipOffset = $tip.offset(), originalLeft = tipOffset.left, originalTop = tipOffset.top, offsetBottom = $(document).outerHeight() - tipOffset.top - $tip.outerHeight(), 0 > offsetBottom && (tipOffset.top = tipOffset.top + offsetBottom), offsetRight = $("html").outerWidth() - tipOffset.left - $tip.outerWidth(), 0 > offsetRight && (tipOffset.left = tipOffset.left + offsetRight), tipOffset.top < 0 && (tipOffset.top = 0), tipOffset.left < 0 && (tipOffset.left = 0), $tip.offset(tipOffset), "bottom" === step.placement || "top" === step.placement) {
					if (originalLeft !== tipOffset.left) return this._replaceArrow($tip, 2 * (tipOffset.left - originalLeft), offsetWidth, "left")
				} else if (originalTop !== tipOffset.top) return this._replaceArrow($tip, 2 * (tipOffset.top - originalTop), offsetHeight, "top")
			}, Tour.prototype._center = function($tip) {
				return $tip.css("top", $(window).outerHeight() / 2 - $tip.outerHeight() / 2)
			}, Tour.prototype._replaceArrow = function($tip, delta, dimension, position) {
				return $tip.find(".arrow").css(position, delta ? 50 * (1 - delta / dimension) + "%" : "")
			}, Tour.prototype._scrollIntoView = function(element, callback) {
				var $element, $window, counter, offsetTop, scrollTop, windowHeight;
				return $element = $(element), $element.length ? ($window = $(window), offsetTop = $element.offset().top, windowHeight = $window.height(), scrollTop = Math.max(0, offsetTop - windowHeight / 2), this._debug("Scroll into view. ScrollTop: " + scrollTop + ". Element offset: " + offsetTop + ". Window height: " + windowHeight + "."), counter = 0, $("body,html").stop(!0, !0).animate({
					scrollTop: Math.ceil(scrollTop)
				}, function(_this) {
					return function() {
						return 2 === ++counter ? (callback(), _this._debug("Scroll into view. Animation end element offset: " + $element.offset().top + ". Window height: " + $window.height() + ".")) : void 0
					}
				}(this))) : callback()
			}, Tour.prototype._onResize = function(callback, timeout) {
				return $(window).on("resize.tour-" + this._options.name, function() {
					return clearTimeout(timeout), timeout = setTimeout(callback, 100)
				})
			}, Tour.prototype._initMouseNavigation = function() {
				var _this;
				return _this = this, $(document).off("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='prev']:not(.disabled)").off("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='next']:not(.disabled)").off("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='end']").off("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='pause-resume']").on("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='next']:not(.disabled)", function(_this) {
					return function(e) {
						return e.preventDefault(), _this.next()
					}
				}(this)).on("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='prev']:not(.disabled)", function(_this) {
					return function(e) {
						return e.preventDefault(), _this.prev()
					}
				}(this)).on("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='end']", function(_this) {
					return function(e) {
						return e.preventDefault(), _this.end()
					}
				}(this)).on("click.tour-" + this._options.name, ".popover.tour-" + this._options.name + " *[data-role='pause-resume']", function(e) {
					var $this;
					return e.preventDefault(), $this = $(this), $this.text($this.data(_this._paused ? "pause-text" : "resume-text")), _this._paused ? _this.resume() : _this.pause()
				})
			}, Tour.prototype._initKeyboardNavigation = function() {
				return this._options.keyboard ? $(document).on("keyup.tour-" + this._options.name, function(_this) {
					return function(e) {
						if (e.which) switch (e.which) {
							case 39:
								return e.preventDefault(), _this._isLast() ? _this.next() : _this.end();
							case 37:
								if (e.preventDefault(), _this._current > 0) return _this.prev();
								break;
							case 27:
								return e.preventDefault(), _this.end()
						}
					}
				}(this)) : void 0
			}, Tour.prototype._makePromise = function(result) {
				return result && $.isFunction(result.then) ? result : null
			}, Tour.prototype._callOnPromiseDone = function(promise, cb, arg) {
				return promise ? promise.then(function(_this) {
					return function() {
						return cb.call(_this, arg)
					}
				}(this)) : cb.call(this, arg)
			}, Tour.prototype._showBackdrop = function() {
				return this.backdrop.backgroundShown ? void 0 : (this.backdrop = $("<div/>", {
					"class": "tour-backdrop"
				}), this.backdrop.backgroundShown = !0, $("body").append(this.backdrop))
			}, Tour.prototype._hideBackdrop = function() {
				return this._hideOverlayElement(), this._hideBackground()
			}, Tour.prototype._hideBackground = function() {
				return this.backdrop ? (this.backdrop.remove(), this.backdrop.overlay = null, this.backdrop.backgroundShown = !1) : void 0
			}, Tour.prototype._showOverlayElement = function(element) {
				var $background, $element, offset;
				return $element = $(element), $element && 0 !== $element.length && !this.backdrop.overlayElementShown ? (this.backdrop.overlayElementShown = !0, $background = $("<div/>"), offset = $element.offset(), offset.top = offset.top, offset.left = offset.left, $background.width($element.innerWidth()).height($element.innerHeight()).addClass("tour-step-background").offset(offset), $element.addClass("tour-step-backdrop"), $("body").append($background), this.backdrop.$element = $element, this.backdrop.$background = $background) : void 0
			}, Tour.prototype._hideOverlayElement = function() {
				return this.backdrop.overlayElementShown ? (this.backdrop.$element.removeClass("tour-step-backdrop"), this.backdrop.$background.remove(), this.backdrop.$element = null, this.backdrop.$background = null, this.backdrop.overlayElementShown = !1) : void 0
			}, Tour.prototype._clearTimer = function() {
				return window.clearTimeout(this._timer), this._timer = null, this._duration = null
			}, Tour
		}(), window.Tour = Tour
	}(jQuery, window),
	function($) {
		var plugin = {},
			defaults = {
				mode: "horizontal",
				slideSelector: "",
				infiniteLoop: !0,
				hideControlOnEnd: !1,
				speed: 500,
				easing: null,
				slideMargin: 0,
				startSlide: 0,
				randomStart: !1,
				captions: !1,
				ticker: !1,
				tickerHover: !1,
				adaptiveHeight: !1,
				adaptiveHeightSpeed: 500,
				video: !1,
				useCSS: !0,
				preloadImages: "visible",
				responsive: !0,
				slideZIndex: 50,
				wrapperClass: "bx-wrapper",
				touchEnabled: !0,
				swipeThreshold: 50,
				oneToOneTouch: !0,
				preventDefaultSwipeX: !0,
				preventDefaultSwipeY: !1,
				pager: !0,
				pagerType: "full",
				pagerShortSeparator: " / ",
				pagerSelector: null,
				buildPager: null,
				pagerCustom: null,
				controls: !0,
				nextText: "Next",
				prevText: "Prev",
				nextSelector: null,
				prevSelector: null,
				autoControls: !1,
				startText: "Start",
				stopText: "Stop",
				autoControlsCombine: !1,
				autoControlsSelector: null,
				auto: !1,
				pause: 4e3,
				autoStart: !0,
				autoDirection: "next",
				autoHover: !1,
				autoDelay: 0,
				autoSlideForOnePage: !1,
				minSlides: 1,
				maxSlides: 1,
				moveSlides: 0,
				slideWidth: 0,
				onSliderLoad: function() {},
				onSlideBefore: function() {},
				onSlideAfter: function() {},
				onSlideNext: function() {},
				onSlidePrev: function() {},
				onSliderResize: function() {}
			};
		$.fn.bxSlider = function(options) {
			if (0 == this.length) return this;
			if (this.length > 1) return this.each(function() {
				$(this).bxSlider(options)
			}), this;
			var slider = {},
				el = this;
			plugin.el = this;
			var windowWidth = $(window).width(),
				windowHeight = $(window).height(),
				init = function() {
					slider.settings = $.extend({}, defaults, options), slider.settings.slideWidth = parseInt(slider.settings.slideWidth), slider.children = el.children(slider.settings.slideSelector), slider.children.length < slider.settings.minSlides && (slider.settings.minSlides = slider.children.length), slider.children.length < slider.settings.maxSlides && (slider.settings.maxSlides = slider.children.length), slider.settings.randomStart && (slider.settings.startSlide = Math.floor(Math.random() * slider.children.length)), slider.active = {
						index: slider.settings.startSlide
					}, slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1, slider.carousel && (slider.settings.preloadImages = "all"), slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin, slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin, slider.working = !1, slider.controls = {}, slider.interval = null, slider.animProp = "vertical" == slider.settings.mode ? "top" : "left", slider.usingCSS = slider.settings.useCSS && "fade" != slider.settings.mode && function() {
						var div = document.createElement("div"),
							props = ["WebkitPerspective", "MozPerspective", "OPerspective", "msPerspective"];
						for (var i in props)
							if (void 0 !== div.style[props[i]]) return slider.cssPrefix = props[i].replace("Perspective", "").toLowerCase(), slider.animProp = "-" + slider.cssPrefix + "-transform", !0;
						return !1
					}(), "vertical" == slider.settings.mode && (slider.settings.maxSlides = slider.settings.minSlides), el.data("origStyle", el.attr("style")), el.children(slider.settings.slideSelector).each(function() {
						$(this).data("origStyle", $(this).attr("style"))
					}), setup()
				},
				setup = function() {
					el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="bx-viewport"></div></div>'), slider.viewport = el.parent(), slider.loader = $('<div class="bx-loading" />'), slider.viewport.prepend(slider.loader), el.css({
						width: "horizontal" == slider.settings.mode ? 100 * slider.children.length + 215 + "%" : "auto",
						position: "relative"
					}), slider.usingCSS && slider.settings.easing ? el.css("-" + slider.cssPrefix + "-transition-timing-function", slider.settings.easing) : slider.settings.easing || (slider.settings.easing = "swing");
					getNumberSlidesShowing();
					slider.viewport.css({
						width: "100%",
						overflow: "hidden",
						position: "relative"
					}), slider.viewport.parent().css({
						maxWidth: getViewportMaxWidth()
					}), slider.settings.pager || slider.viewport.parent().css({
						margin: "0 auto 0px"
					}), slider.children.css({
						"float": "horizontal" == slider.settings.mode ? "left" : "none",
						listStyle: "none",
						position: "relative"
					}), slider.children.css("width", getSlideWidth()), "horizontal" == slider.settings.mode && slider.settings.slideMargin > 0 && slider.children.css("marginRight", slider.settings.slideMargin), "vertical" == slider.settings.mode && slider.settings.slideMargin > 0 && slider.children.css("marginBottom", slider.settings.slideMargin), "fade" == slider.settings.mode && (slider.children.css({
						position: "absolute",
						zIndex: 0,
						display: "none"
					}), slider.children.eq(slider.settings.startSlide).css({
						zIndex: slider.settings.slideZIndex,
						display: "block"
					})), slider.controls.el = $('<div class="bx-controls" />'), slider.settings.captions && appendCaptions(), slider.active.last = slider.settings.startSlide == getPagerQty() - 1, slider.settings.video && el.fitVids();
					var preloadSelector = slider.children.eq(slider.settings.startSlide);
					"all" == slider.settings.preloadImages && (preloadSelector = slider.children), slider.settings.ticker ? slider.settings.pager = !1 : (slider.settings.pager && appendPager(), slider.settings.controls && appendControls(), slider.settings.auto && slider.settings.autoControls && appendControlsAuto(), (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) && slider.viewport.after(slider.controls.el)), loadElements(preloadSelector, start)
				},
				loadElements = function(selector, callback) {
					var total = selector.find("img, iframe").length;
					if (0 == total) return void callback();
					var count = 0;
					selector.find("img, iframe").each(function() {
						$(this).one("load", function() {
							++count == total && callback()
						}).each(function() {
							this.complete && $(this).load()
						})
					})
				},
				start = function() {
					if (slider.settings.infiniteLoop && "fade" != slider.settings.mode && !slider.settings.ticker) {
						var slice = "vertical" == slider.settings.mode ? slider.settings.minSlides : slider.settings.maxSlides,
							sliceAppend = slider.children.slice(0, slice).clone().addClass("bx-clone"),
							slicePrepend = slider.children.slice(-slice).clone().addClass("bx-clone");
						el.append(sliceAppend).prepend(slicePrepend)
					}
					slider.loader.remove(), setSlidePosition(), "vertical" == slider.settings.mode && (slider.settings.adaptiveHeight = !0), slider.viewport.height(getViewportHeight()), el.redrawSlider(), slider.settings.onSliderLoad(slider.active.index), slider.initialized = !0, slider.settings.responsive && $(window).bind("resize", resizeWindow), slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage) && initAuto(), slider.settings.ticker && initTicker(), slider.settings.pager && updatePagerActive(slider.settings.startSlide), slider.settings.controls && updateDirectionControls(), slider.settings.touchEnabled && !slider.settings.ticker && initTouch()
				},
				getViewportHeight = function() {
					var height = 0,
						children = $();
					if ("vertical" == slider.settings.mode || slider.settings.adaptiveHeight)
						if (slider.carousel) {
							var currentIndex = 1 == slider.settings.moveSlides ? slider.active.index : slider.active.index * getMoveBy();
							for (children = slider.children.eq(currentIndex), i = 1; i <= slider.settings.maxSlides - 1; i++) children = children.add(currentIndex + i >= slider.children.length ? slider.children.eq(i - 1) : slider.children.eq(currentIndex + i))
						} else children = slider.children.eq(slider.active.index);
					else children = slider.children;
					return "vertical" == slider.settings.mode ? (children.each(function() {
						height += $(this).outerHeight()
					}), slider.settings.slideMargin > 0 && (height += slider.settings.slideMargin * (slider.settings.minSlides - 1))) : height = Math.max.apply(Math, children.map(function() {
						return $(this).outerHeight(!1)
					}).get()), "border-box" == slider.viewport.css("box-sizing") ? height += parseFloat(slider.viewport.css("padding-top")) + parseFloat(slider.viewport.css("padding-bottom")) + parseFloat(slider.viewport.css("border-top-width")) + parseFloat(slider.viewport.css("border-bottom-width")) : "padding-box" == slider.viewport.css("box-sizing") && (height += parseFloat(slider.viewport.css("padding-top")) + parseFloat(slider.viewport.css("padding-bottom"))), height
				},
				getViewportMaxWidth = function() {
					var width = "100%";
					return slider.settings.slideWidth > 0 && (width = "horizontal" == slider.settings.mode ? slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin : slider.settings.slideWidth), width
				},
				getSlideWidth = function() {
					var newElWidth = slider.settings.slideWidth,
						wrapWidth = slider.viewport.width();
					return 0 == slider.settings.slideWidth || slider.settings.slideWidth > wrapWidth && !slider.carousel || "vertical" == slider.settings.mode ? newElWidth = wrapWidth : slider.settings.maxSlides > 1 && "horizontal" == slider.settings.mode && (wrapWidth > slider.maxThreshold || wrapWidth < slider.minThreshold && (newElWidth = (wrapWidth - slider.settings.slideMargin * (slider.settings.minSlides - 1)) / slider.settings.minSlides)), newElWidth
				},
				getNumberSlidesShowing = function() {
					var slidesShowing = 1;
					if ("horizontal" == slider.settings.mode && slider.settings.slideWidth > 0)
						if (slider.viewport.width() < slider.minThreshold) slidesShowing = slider.settings.minSlides;
						else if (slider.viewport.width() > slider.maxThreshold) slidesShowing = slider.settings.maxSlides;
					else {
						var childWidth = slider.children.first().width() + slider.settings.slideMargin;
						slidesShowing = Math.floor((slider.viewport.width() + slider.settings.slideMargin) / childWidth)
					} else "vertical" == slider.settings.mode && (slidesShowing = slider.settings.minSlides);
					return slidesShowing
				},
				getPagerQty = function() {
					var pagerQty = 0;
					if (slider.settings.moveSlides > 0)
						if (slider.settings.infiniteLoop) pagerQty = Math.ceil(slider.children.length / getMoveBy());
						else
							for (var breakPoint = 0, counter = 0; breakPoint < slider.children.length;) ++pagerQty, breakPoint = counter + getNumberSlidesShowing(), counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
					else pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
					return pagerQty
				},
				getMoveBy = function() {
					return slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing()
				},
				setSlidePosition = function() {
					if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
						if ("horizontal" == slider.settings.mode) {
							var lastChild = slider.children.last(),
								position = lastChild.position();
							setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), "reset", 0)
						} else if ("vertical" == slider.settings.mode) {
							var lastShowingIndex = slider.children.length - slider.settings.minSlides,
								position = slider.children.eq(lastShowingIndex).position();
							setPositionProperty(-position.top, "reset", 0)
						}
					} else {
						var position = slider.children.eq(slider.active.index * getMoveBy()).position();
						slider.active.index == getPagerQty() - 1 && (slider.active.last = !0), void 0 != position && ("horizontal" == slider.settings.mode ? setPositionProperty(-position.left, "reset", 0) : "vertical" == slider.settings.mode && setPositionProperty(-position.top, "reset", 0))
					}
				},
				setPositionProperty = function(value, type, duration, params) {
					if (slider.usingCSS) {
						var propValue = "vertical" == slider.settings.mode ? "translate3d(0, " + value + "px, 0)" : "translate3d(" + value + "px, 0, 0)";
						el.css("-" + slider.cssPrefix + "-transition-duration", duration / 1e3 + "s"), "slide" == type ? (el.css(slider.animProp, propValue), el.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
							el.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"), updateAfterSlideTransition()
						})) : "reset" == type ? el.css(slider.animProp, propValue) : "ticker" == type && (el.css("-" + slider.cssPrefix + "-transition-timing-function", "linear"), el.css(slider.animProp, propValue), el.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
							el.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"), setPositionProperty(params.resetValue, "reset", 0), tickerLoop()
						}))
					} else {
						var animateObj = {};
						animateObj[slider.animProp] = value, "slide" == type ? el.animate(animateObj, duration, slider.settings.easing, function() {
							updateAfterSlideTransition()
						}) : "reset" == type ? el.css(slider.animProp, value) : "ticker" == type && el.animate(animateObj, speed, "linear", function() {
							setPositionProperty(params.resetValue, "reset", 0), tickerLoop()
						})
					}
				},
				populatePager = function() {
					for (var pagerHtml = "", pagerQty = getPagerQty(), i = 0; pagerQty > i; i++) {
						var linkContent = "";
						slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? (linkContent = slider.settings.buildPager(i), slider.pagerEl.addClass("bx-custom-pager")) : (linkContent = i + 1, slider.pagerEl.addClass("bx-default-pager")), pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + "</a></div>"
					}
					slider.pagerEl.html(pagerHtml)
				},
				appendPager = function() {
					slider.settings.pagerCustom ? slider.pagerEl = $(slider.settings.pagerCustom) : (slider.pagerEl = $('<div class="bx-pager" />'), slider.settings.pagerSelector ? $(slider.settings.pagerSelector).html(slider.pagerEl) : slider.controls.el.addClass("bx-has-pager").append(slider.pagerEl), populatePager()), slider.pagerEl.on("click", "a", clickPagerBind)
				},
				appendControls = function() {
					slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + "</a>"), slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + "</a>"), slider.controls.next.bind("click", clickNextBind), slider.controls.prev.bind("click", clickPrevBind), slider.settings.nextSelector && $(slider.settings.nextSelector).append(slider.controls.next), slider.settings.prevSelector && $(slider.settings.prevSelector).append(slider.controls.prev), slider.settings.nextSelector || slider.settings.prevSelector || (slider.controls.directionEl = $('<div class="bx-controls-direction" />'), slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next), slider.controls.el.addClass("bx-has-controls-direction").append(slider.controls.directionEl))
				},
				appendControlsAuto = function() {
					slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + "</a></div>"), slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + "</a></div>"), slider.controls.autoEl = $('<div class="bx-controls-auto" />'), slider.controls.autoEl.on("click", ".bx-start", clickStartBind), slider.controls.autoEl.on("click", ".bx-stop", clickStopBind), slider.settings.autoControlsCombine ? slider.controls.autoEl.append(slider.controls.start) : slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop), slider.settings.autoControlsSelector ? $(slider.settings.autoControlsSelector).html(slider.controls.autoEl) : slider.controls.el.addClass("bx-has-controls-auto").append(slider.controls.autoEl), updateAutoControls(slider.settings.autoStart ? "stop" : "start")
				},
				appendCaptions = function() {
					slider.children.each(function() {
						var title = $(this).find("img:first").attr("title");
						void 0 != title && ("" + title).length && $(this).append('<div class="bx-caption"><span>' + title + "</span></div>")
					})
				},
				clickNextBind = function(e) {
					slider.settings.auto && el.stopAuto(), el.goToNextSlide(), e.preventDefault()
				},
				clickPrevBind = function(e) {
					slider.settings.auto && el.stopAuto(), el.goToPrevSlide(), e.preventDefault()
				},
				clickStartBind = function(e) {
					el.startAuto(), e.preventDefault()
				},
				clickStopBind = function(e) {
					el.stopAuto(), e.preventDefault()
				},
				clickPagerBind = function(e) {
					slider.settings.auto && el.stopAuto();
					var pagerLink = $(e.currentTarget);
					if (void 0 !== pagerLink.attr("data-slide-index")) {
						var pagerIndex = parseInt(pagerLink.attr("data-slide-index"));
						pagerIndex != slider.active.index && el.goToSlide(pagerIndex), e.preventDefault()
					}
				},
				updatePagerActive = function(slideIndex) {
					var len = slider.children.length;
					return "short" == slider.settings.pagerType ? (slider.settings.maxSlides > 1 && (len = Math.ceil(slider.children.length / slider.settings.maxSlides)), void slider.pagerEl.html(slideIndex + 1 + slider.settings.pagerShortSeparator + len)) : (slider.pagerEl.find("a").removeClass("active"), void slider.pagerEl.each(function(i, el) {
						$(el).find("a").eq(slideIndex).addClass("active")
					}))
				},
				updateAfterSlideTransition = function() {
					if (slider.settings.infiniteLoop) {
						var position = "";
						0 == slider.active.index ? position = slider.children.eq(0).position() : slider.active.index == getPagerQty() - 1 && slider.carousel ? position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position() : slider.active.index == slider.children.length - 1 && (position = slider.children.eq(slider.children.length - 1).position()), position && ("horizontal" == slider.settings.mode ? setPositionProperty(-position.left, "reset", 0) : "vertical" == slider.settings.mode && setPositionProperty(-position.top, "reset", 0))
					}
					slider.working = !1, slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)
				},
				updateAutoControls = function(state) {
					slider.settings.autoControlsCombine ? slider.controls.autoEl.html(slider.controls[state]) : (slider.controls.autoEl.find("a").removeClass("active"), slider.controls.autoEl.find("a:not(.bx-" + state + ")").addClass("active"))
				},
				updateDirectionControls = function() {
					1 == getPagerQty() ? (slider.controls.prev.addClass("disabled"), slider.controls.next.addClass("disabled")) : !slider.settings.infiniteLoop && slider.settings.hideControlOnEnd && (0 == slider.active.index ? (slider.controls.prev.addClass("disabled"), slider.controls.next.removeClass("disabled")) : slider.active.index == getPagerQty() - 1 ? (slider.controls.next.addClass("disabled"), slider.controls.prev.removeClass("disabled")) : (slider.controls.prev.removeClass("disabled"), slider.controls.next.removeClass("disabled")))
				},
				initAuto = function() {
					if (slider.settings.autoDelay > 0) {
						setTimeout(el.startAuto, slider.settings.autoDelay)
					} else el.startAuto();
					slider.settings.autoHover && el.hover(function() {
						slider.interval && (el.stopAuto(!0), slider.autoPaused = !0)
					}, function() {
						slider.autoPaused && (el.startAuto(!0), slider.autoPaused = null)
					})
				},
				initTicker = function() {
					var startPosition = 0;
					if ("next" == slider.settings.autoDirection) el.append(slider.children.clone().addClass("bx-clone"));
					else {
						el.prepend(slider.children.clone().addClass("bx-clone"));

						var position = slider.children.first().position();
						startPosition = "horizontal" == slider.settings.mode ? -position.left : -position.top
					}
					setPositionProperty(startPosition, "reset", 0), slider.settings.pager = !1, slider.settings.controls = !1, slider.settings.autoControls = !1, slider.settings.tickerHover && !slider.usingCSS && slider.viewport.hover(function() {
						el.stop()
					}, function() {
						var totalDimens = 0;
						slider.children.each(function() {
							totalDimens += "horizontal" == slider.settings.mode ? $(this).outerWidth(!0) : $(this).outerHeight(!0)
						});
						var ratio = slider.settings.speed / totalDimens,
							property = "horizontal" == slider.settings.mode ? "left" : "top",
							newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))));
						tickerLoop(newSpeed)
					}), tickerLoop()
				},
				tickerLoop = function(resumeSpeed) {
					speed = resumeSpeed ? resumeSpeed : slider.settings.speed;
					var position = {
							left: 0,
							top: 0
						},
						reset = {
							left: 0,
							top: 0
						};
					"next" == slider.settings.autoDirection ? position = el.find(".bx-clone").first().position() : reset = slider.children.first().position();
					var animateProperty = "horizontal" == slider.settings.mode ? -position.left : -position.top,
						resetValue = "horizontal" == slider.settings.mode ? -reset.left : -reset.top,
						params = {
							resetValue: resetValue
						};
					setPositionProperty(animateProperty, "ticker", speed, params)
				},
				initTouch = function() {
					slider.touch = {
						start: {
							x: 0,
							y: 0
						},
						end: {
							x: 0,
							y: 0
						}
					}, slider.viewport.bind("touchstart", onTouchStart)
				},
				onTouchStart = function(e) {
					if (slider.working) e.preventDefault();
					else {
						slider.touch.originalPos = el.position();
						var orig = e.originalEvent;
						slider.touch.start.x = orig.changedTouches[0].pageX, slider.touch.start.y = orig.changedTouches[0].pageY, slider.viewport.bind("touchmove", onTouchMove), slider.viewport.bind("touchend", onTouchEnd)
					}
				},
				onTouchMove = function(e) {
					var orig = e.originalEvent,
						xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x),
						yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y);
					if (3 * xMovement > yMovement && slider.settings.preventDefaultSwipeX ? e.preventDefault() : 3 * yMovement > xMovement && slider.settings.preventDefaultSwipeY && e.preventDefault(), "fade" != slider.settings.mode && slider.settings.oneToOneTouch) {
						var value = 0;
						if ("horizontal" == slider.settings.mode) {
							var change = orig.changedTouches[0].pageX - slider.touch.start.x;
							value = slider.touch.originalPos.left + change
						} else {
							var change = orig.changedTouches[0].pageY - slider.touch.start.y;
							value = slider.touch.originalPos.top + change
						}
						setPositionProperty(value, "reset", 0)
					}
				},
				onTouchEnd = function(e) {
					slider.viewport.unbind("touchmove", onTouchMove);
					var orig = e.originalEvent,
						value = 0;
					if (slider.touch.end.x = orig.changedTouches[0].pageX, slider.touch.end.y = orig.changedTouches[0].pageY, "fade" == slider.settings.mode) {
						var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
						distance >= slider.settings.swipeThreshold && (slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide(), el.stopAuto())
					} else {
						var distance = 0;
						"horizontal" == slider.settings.mode ? (distance = slider.touch.end.x - slider.touch.start.x, value = slider.touch.originalPos.left) : (distance = slider.touch.end.y - slider.touch.start.y, value = slider.touch.originalPos.top), !slider.settings.infiniteLoop && (0 == slider.active.index && distance > 0 || slider.active.last && 0 > distance) ? setPositionProperty(value, "reset", 200) : Math.abs(distance) >= slider.settings.swipeThreshold ? (0 > distance ? el.goToNextSlide() : el.goToPrevSlide(), el.stopAuto()) : setPositionProperty(value, "reset", 200)
					}
					slider.viewport.unbind("touchend", onTouchEnd)
				},
				resizeWindow = function() {
					if (slider.initialized) {
						var windowWidthNew = $(window).width(),
							windowHeightNew = $(window).height();
						(windowWidth != windowWidthNew || windowHeight != windowHeightNew) && (windowWidth = windowWidthNew, windowHeight = windowHeightNew, el.redrawSlider(), slider.settings.onSliderResize.call(el, slider.active.index))
					}
				};
			return el.goToSlide = function(slideIndex, direction) {
				if (!slider.working && slider.active.index != slideIndex)
					if (slider.working = !0, slider.oldIndex = slider.active.index, slider.active.index = 0 > slideIndex ? getPagerQty() - 1 : slideIndex >= getPagerQty() ? 0 : slideIndex, slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index), "next" == direction ? slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index) : "prev" == direction && slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index), slider.active.last = slider.active.index >= getPagerQty() - 1, slider.settings.pager && updatePagerActive(slider.active.index), slider.settings.controls && updateDirectionControls(), "fade" == slider.settings.mode) slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight() && slider.viewport.animate({
						height: getViewportHeight()
					}, slider.settings.adaptiveHeightSpeed), slider.children.filter(":visible").fadeOut(slider.settings.speed).css({
						zIndex: 0
					}), slider.children.eq(slider.active.index).css("zIndex", slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function() {
						$(this).css("zIndex", slider.settings.slideZIndex), updateAfterSlideTransition()
					});
					else {
						slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight() && slider.viewport.animate({
							height: getViewportHeight()
						}, slider.settings.adaptiveHeightSpeed);
						var moveBy = 0,
							position = {
								left: 0,
								top: 0
							};
						if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last)
							if ("horizontal" == slider.settings.mode) {
								var lastChild = slider.children.eq(slider.children.length - 1);
								position = lastChild.position(), moveBy = slider.viewport.width() - lastChild.outerWidth()
							} else {
								var lastShowingIndex = slider.children.length - slider.settings.minSlides;
								position = slider.children.eq(lastShowingIndex).position()
							} else if (slider.carousel && slider.active.last && "prev" == direction) {
							var eq = 1 == slider.settings.moveSlides ? slider.settings.maxSlides - getMoveBy() : (getPagerQty() - 1) * getMoveBy() - (slider.children.length - slider.settings.maxSlides),
								lastChild = el.children(".bx-clone").eq(eq);
							position = lastChild.position()
						} else if ("next" == direction && 0 == slider.active.index) position = el.find("> .bx-clone").eq(slider.settings.maxSlides).position(), slider.active.last = !1;
						else if (slideIndex >= 0) {
							var requestEl = slideIndex * getMoveBy();
							position = slider.children.eq(requestEl).position()
						}
						if ("undefined" != typeof position) {
							var value = "horizontal" == slider.settings.mode ? -(position.left - moveBy) : -position.top;
							setPositionProperty(value, "slide", slider.settings.speed)
						}
					}
			}, el.goToNextSlide = function() {
				if (slider.settings.infiniteLoop || !slider.active.last) {
					var pagerIndex = parseInt(slider.active.index) + 1;
					el.goToSlide(pagerIndex, "next")
				}
			}, el.goToPrevSlide = function() {
				if (slider.settings.infiniteLoop || 0 != slider.active.index) {
					var pagerIndex = parseInt(slider.active.index) - 1;
					el.goToSlide(pagerIndex, "prev")
				}
			}, el.startAuto = function(preventControlUpdate) {
				slider.interval || (slider.interval = setInterval(function() {
					"next" == slider.settings.autoDirection ? el.goToNextSlide() : el.goToPrevSlide()
				}, slider.settings.pause), slider.settings.autoControls && 1 != preventControlUpdate && updateAutoControls("stop"))
			}, el.stopAuto = function(preventControlUpdate) {
				slider.interval && (clearInterval(slider.interval), slider.interval = null, slider.settings.autoControls && 1 != preventControlUpdate && updateAutoControls("start"))
			}, el.getCurrentSlide = function() {
				return slider.active.index
			}, el.getCurrentSlideElement = function() {
				return slider.children.eq(slider.active.index)
			}, el.getSlideCount = function() {
				return slider.children.length
			}, el.redrawSlider = function() {
				slider.children.add(el.find(".bx-clone")).width(getSlideWidth()), slider.viewport.css("height", getViewportHeight()), slider.settings.ticker || setSlidePosition(), slider.active.last && (slider.active.index = getPagerQty() - 1), slider.active.index >= getPagerQty() && (slider.active.last = !0), slider.settings.pager && !slider.settings.pagerCustom && (populatePager(), updatePagerActive(slider.active.index))
			}, el.destroySlider = function() {
				slider.initialized && (slider.initialized = !1, $(".bx-clone", this).remove(), slider.children.each(function() {
					void 0 != $(this).data("origStyle") ? $(this).attr("style", $(this).data("origStyle")) : $(this).removeAttr("style")
				}), void 0 != $(this).data("origStyle") ? this.attr("style", $(this).data("origStyle")) : $(this).removeAttr("style"), $(this).unwrap().unwrap(), slider.controls.el && slider.controls.el.remove(), slider.controls.next && slider.controls.next.remove(), slider.controls.prev && slider.controls.prev.remove(), slider.pagerEl && slider.settings.controls && slider.pagerEl.remove(), $(".bx-caption", this).remove(), slider.controls.autoEl && slider.controls.autoEl.remove(), clearInterval(slider.interval), slider.settings.responsive && $(window).unbind("resize", resizeWindow))
			}, el.reloadSlider = function(settings) {
				void 0 != settings && (options = settings), el.destroySlider(), init()
			}, init(), this
		}
	}(jQuery), "function" != typeof String.prototype.trim && (String.prototype.trim = function() {
		return this.replace(/^\s+|\s+$/g, "")
	}),
	function($) {
		"function" != typeof Function.prototype.bind && (Function.prototype.bind = function(scope) {
			var f = this,
				args = Array.prototype.splice.call(arguments, 1);
			return function() {
				return f.apply(scope || window, args.concat(arguments))
			}
		}), String.prototype.lastIndexByFunction || (String.prototype.lastIndexByFunction = function(func, params) {
			for (var mid, result, low = 0, high = this.length - 1, best = -1; high >= low;) mid = Math.floor((low + high) / 2), result = func.call(this, mid, params), 0 > result ? high = mid + result : result > 0 ? low = mid + result : (best = mid, low = mid + 1);
			return best
		}), $.each(["show", "toggleClass", "addClass", "removeClass"], function() {
			var oldFn = $.fn[this],
				triggerShowEvent = function() {
					$(this).triggerHandler("show")
				};
			$.fn[this] = function() {
				var hidden = this.find(":hidden").add(this.filter(":hidden")),
					result = oldFn.apply(this, arguments);
				return hidden.filter(":visible").each(triggerShowEvent), result
			}
		});
		var tooTall = function() {
				return this.tempElement.height() > this.el.height()
			},
			tooWide = function() {
				return this.tempElement.width() > this.el.width()
			},
			ellipsis = function(str, len, breakWords) {
				if (!0 !== breakWords) {
					var spacePos = str.lastIndexOf(" ", len);
					spacePos > -1 && (len = spacePos)
				}
				return str.substr(0, len).trim() + "…"
			},
			search = function(i, params) {
				return params.tempElement.html(params.ellipsis(this, i, params.breakWords)), params.comparator() ? -1 : 0
			};
		$.fn.ellipsis = function(addTooltip) {
			return this.each(function() {
				var tempElement, content, comparator, len, el = $(this),
					multiline = "nowrap" !== el.css("white-space"),
					breakWords = "break-word" === el.css("word-wrap");
				if (el.is(":hidden")) return void el.one("show", function() {
					$(this).ellipsis(addTooltip)
				});
				if ("hidden" === el.css("overflow")) {
					if (content = el.html() === el.data("trimText") ? el.data("origText") : el.html(), tempElement = $(this.cloneNode(!0)).hide().css("position", "absolute").css("overflow", "visible").width(multiline ? el.width() : "auto").height(multiline ? "auto" : el.height()).html(content), el.after(tempElement), comparator = (multiline ? tooTall : tooWide).bind({
							el: el,
							tempElement: tempElement
						}), !comparator()) return void tempElement.remove();
					addTooltip && el.attr("title", $.trim(el.text()).replace(/\s\s+/g, " ")), len = content.lastIndexByFunction(search, {
						tempElement: tempElement,
						comparator: comparator,
						ellipsis: ellipsis,
						breakWords: breakWords
					}), len > -1 && el.data("origText", content).data("trimText", ellipsis(content, len, breakWords)).html(el.data("trimText")).addClass("ellipsis"), tempElement.remove()
				}
			})
		}, $(document).ready(function() {
			$(".ellipsis").ellipsis(!0)
		}), $(window).on("resize", function() {
			window.setTimeout($.ellipsis, 100)
		}), "onorientationchange" in window && $(window).on("orientationchange", function() {
			window.setTimeout($.ellipsis, 100)
		}), $.ellipsis = function() {
			$(".ellipsis").ellipsis()
		}
	}(window.jQuery),
	function() {
		var $, AbstractChosen, Chosen, SelectParser, _ref, __hasProp = {}.hasOwnProperty,
			__extends = function(child, parent) {
				function ctor() {
					this.constructor = child
				}
				for (var key in parent) __hasProp.call(parent, key) && (child[key] = parent[key]);
				return ctor.prototype = parent.prototype, child.prototype = new ctor, child.__super__ = parent.prototype, child
			};
		SelectParser = function() {
			function SelectParser() {
				this.options_index = 0, this.parsed = []
			}
			return SelectParser.prototype.add_node = function(child) {
				return "OPTGROUP" === child.nodeName.toUpperCase() ? this.add_group(child) : this.add_option(child)
			}, SelectParser.prototype.add_group = function(group) {
				var group_position, option, _i, _len, _ref, _results;
				for (group_position = this.parsed.length, this.parsed.push({
						array_index: group_position,
						group: !0,
						label: this.escapeExpression(group.label),
						children: 0,
						disabled: group.disabled
					}), _ref = group.childNodes, _results = [], _i = 0, _len = _ref.length; _len > _i; _i++) option = _ref[_i], _results.push(this.add_option(option, group_position, group.disabled));
				return _results
			}, SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
				return "OPTION" === option.nodeName.toUpperCase() ? ("" !== option.text ? (null != group_position && (this.parsed[group_position].children += 1), this.parsed.push({
					array_index: this.parsed.length,
					options_index: this.options_index,
					value: option.value,
					text: option.text,
					html: option.innerHTML,
					selected: option.selected,
					disabled: group_disabled === !0 ? group_disabled : option.disabled,
					group_array_index: group_position,
					classes: option.className,
					style: option.style.cssText
				})) : this.parsed.push({
					array_index: this.parsed.length,
					options_index: this.options_index,
					empty: !0
				}), this.options_index += 1) : void 0
			}, SelectParser.prototype.escapeExpression = function(text) {
				var map, unsafe_chars;
				return null == text || text === !1 ? "" : /[\&\<\>\"\'\`]/.test(text) ? (map = {
					"<": "&lt;",
					">": "&gt;",
					'"': "&quot;",
					"'": "&#x27;",
					"`": "&#x60;"
				}, unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g, text.replace(unsafe_chars, function(chr) {
					return map[chr] || "&amp;"
				})) : text
			}, SelectParser
		}(), SelectParser.select_to_array = function(select) {
			var child, parser, _i, _len, _ref;
			for (parser = new SelectParser, _ref = select.childNodes, _i = 0, _len = _ref.length; _len > _i; _i++) child = _ref[_i], parser.add_node(child);
			return parser.parsed
		}, AbstractChosen = function() {
			function AbstractChosen(form_field, options) {
				this.form_field = form_field, this.options = null != options ? options : {}, AbstractChosen.browser_is_supported() && (this.is_multiple = this.form_field.multiple, this.set_default_text(), this.set_default_values(), this.setup(), this.set_up_html(), this.register_observers())
			}
			return AbstractChosen.prototype.set_default_values = function() {
				var _this = this;
				return this.click_test_action = function(evt) {
					return _this.test_active_click(evt)
				}, this.activate_action = function(evt) {
					return _this.activate_field(evt)
				}, this.active_field = !1, this.mouse_on_container = !1, this.results_showing = !1, this.result_highlighted = null, this.allow_single_deselect = null != this.options.allow_single_deselect && null != this.form_field.options[0] && "" === this.form_field.options[0].text ? this.options.allow_single_deselect : !1, this.disable_search_threshold = this.options.disable_search_threshold || 0, this.disable_search = this.options.disable_search || !1, this.enable_split_word_search = null != this.options.enable_split_word_search ? this.options.enable_split_word_search : !0, this.group_search = null != this.options.group_search ? this.options.group_search : !0, this.search_contains = this.options.search_contains || !1, this.single_backstroke_delete = null != this.options.single_backstroke_delete ? this.options.single_backstroke_delete : !0, this.max_selected_options = this.options.max_selected_options || 1 / 0, this.inherit_select_classes = this.options.inherit_select_classes || !1, this.display_selected_options = null != this.options.display_selected_options ? this.options.display_selected_options : !0, this.display_disabled_options = null != this.options.display_disabled_options ? this.options.display_disabled_options : !0
			}, AbstractChosen.prototype.set_default_text = function() {
				return this.default_text = this.form_field.getAttribute("data-placeholder") ? this.form_field.getAttribute("data-placeholder") : this.is_multiple ? this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text : this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text, this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text
			}, AbstractChosen.prototype.mouse_enter = function() {
				return this.mouse_on_container = !0
			}, AbstractChosen.prototype.mouse_leave = function() {
				return this.mouse_on_container = !1
			}, AbstractChosen.prototype.input_focus = function() {
				var _this = this;
				if (this.is_multiple) {
					if (!this.active_field) return setTimeout(function() {
						return _this.container_mousedown()
					}, 50)
				} else if (!this.active_field) return this.activate_field()
			}, AbstractChosen.prototype.input_blur = function() {
				var _this = this;
				return this.mouse_on_container ? void 0 : (this.active_field = !1, setTimeout(function() {
					return _this.blur_test()
				}, 100))
			}, AbstractChosen.prototype.results_option_build = function(options) {
				var content, data, _i, _len, _ref;
				for (content = "", _ref = this.results_data, _i = 0, _len = _ref.length; _len > _i; _i++) data = _ref[_i], content += data.group ? this.result_add_group(data) : this.result_add_option(data), (null != options ? options.first : void 0) && (data.selected && this.is_multiple ? this.choice_build(data) : data.selected && !this.is_multiple && this.single_set_selected_text(data.text));
				return content
			}, AbstractChosen.prototype.result_add_option = function(option) {
				var classes, option_el;
				return option.search_match && this.include_option_in_results(option) ? (classes = [], option.disabled || option.selected && this.is_multiple || classes.push("active-result"), !option.disabled || option.selected && this.is_multiple || classes.push("disabled-result"), option.selected && classes.push("result-selected"), null != option.group_array_index && classes.push("group-option"), "" !== option.classes && classes.push(option.classes), option_el = document.createElement("li"), option_el.className = classes.join(" "), option_el.style.cssText = option.style, option_el.setAttribute("data-option-array-index", option.array_index), option_el.innerHTML = option.search_text, this.outerHTML(option_el)) : ""
			}, AbstractChosen.prototype.result_add_group = function(group) {
				var group_el;
				return (group.search_match || group.group_match) && group.active_options > 0 ? (group_el = document.createElement("li"), group_el.className = "group-result", group_el.innerHTML = group.search_text, this.outerHTML(group_el)) : ""
			}, AbstractChosen.prototype.results_update_field = function() {
				return this.set_default_text(), this.is_multiple || this.results_reset_cleanup(), this.result_clear_highlight(), this.results_build(), this.results_showing ? this.winnow_results() : void 0
			}, AbstractChosen.prototype.reset_single_select_options = function() {
				var result, _i, _len, _ref, _results;
				for (_ref = this.results_data, _results = [], _i = 0, _len = _ref.length; _len > _i; _i++) result = _ref[_i], _results.push(result.selected ? result.selected = !1 : void 0);
				return _results
			}, AbstractChosen.prototype.results_toggle = function() {
				return this.results_showing ? this.results_hide() : this.results_show()
			}, AbstractChosen.prototype.results_search = function() {
				return this.results_showing ? this.winnow_results() : this.results_show()
			}, AbstractChosen.prototype.winnow_results = function() {
				var escapedSearchText, option, regex, regexAnchor, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref;
				for (this.no_results_clear(), results = 0, searchText = this.get_search_text(), escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), regexAnchor = this.search_contains ? "" : "^", regex = new RegExp(regexAnchor + escapedSearchText, "i"), zregex = new RegExp(escapedSearchText, "i"), _ref = this.results_data, _i = 0, _len = _ref.length; _len > _i; _i++) option = _ref[_i], option.search_match = !1, results_group = null, this.include_option_in_results(option) && (option.group && (option.group_match = !1, option.active_options = 0), null != option.group_array_index && this.results_data[option.group_array_index] && (results_group = this.results_data[option.group_array_index], 0 === results_group.active_options && results_group.search_match && (results += 1), results_group.active_options += 1), (!option.group || this.group_search) && (option.search_text = option.group ? option.label : option.html, option.search_match = this.search_string_match(option.search_text, regex), option.search_match && !option.group && (results += 1), option.search_match ? (searchText.length && (startpos = option.search_text.search(zregex), text = option.search_text.substr(0, startpos + searchText.length) + "</em>" + option.search_text.substr(startpos + searchText.length), option.search_text = text.substr(0, startpos) + "<em>" + text.substr(startpos)), null != results_group && (results_group.group_match = !0)) : null != option.group_array_index && this.results_data[option.group_array_index].search_match && (option.search_match = !0)));
				return this.result_clear_highlight(), 1 > results && searchText.length ? (this.update_results_content(""), this.no_results(searchText)) : (this.update_results_content(this.results_option_build()), this.winnow_results_set_highlight())
			}, AbstractChosen.prototype.search_string_match = function(search_string, regex) {
				var part, parts, _i, _len;
				if (regex.test(search_string)) return !0;
				if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || 0 === search_string.indexOf("[")) && (parts = search_string.replace(/\[|\]/g, "").split(" "), parts.length))
					for (_i = 0, _len = parts.length; _len > _i; _i++)
						if (part = parts[_i], regex.test(part)) return !0
			}, AbstractChosen.prototype.choices_count = function() {
				var option, _i, _len, _ref;
				if (null != this.selected_option_count) return this.selected_option_count;
				for (this.selected_option_count = 0, _ref = this.form_field.options, _i = 0, _len = _ref.length; _len > _i; _i++) option = _ref[_i], option.selected && (this.selected_option_count += 1);
				return this.selected_option_count
			}, AbstractChosen.prototype.choices_click = function(evt) {
				return evt.preventDefault(), this.results_showing || this.is_disabled ? void 0 : this.results_show()
			}, AbstractChosen.prototype.keyup_checker = function(evt) {
				var stroke, _ref;
				switch (stroke = null != (_ref = evt.which) ? _ref : evt.keyCode, this.search_field_scale(), stroke) {
					case 8:
						if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) return this.keydown_backstroke();
						if (!this.pending_backstroke) return this.result_clear_highlight(), this.results_search();
						break;
					case 13:
						if (evt.preventDefault(), this.results_showing) return this.result_select(evt);
						break;
					case 27:
						return this.results_showing && this.results_hide(), !0;
					case 9:
					case 38:
					case 40:
					case 16:
					case 91:
					case 17:
						break;
					default:
						return this.results_search()
				}
			}, AbstractChosen.prototype.clipboard_event_checker = function() {
				var _this = this;
				return setTimeout(function() {
					return _this.results_search()
				}, 50)
			}, AbstractChosen.prototype.container_width = function() {
				return null != this.options.width ? this.options.width : "" + this.form_field.offsetWidth + "px"
			}, AbstractChosen.prototype.include_option_in_results = function(option) {
				return this.is_multiple && !this.display_selected_options && option.selected ? !1 : !this.display_disabled_options && option.disabled ? !1 : option.empty ? !1 : !0
			}, AbstractChosen.prototype.search_results_touchstart = function(evt) {
				return this.touch_started = !0, this.search_results_mouseover(evt)
			}, AbstractChosen.prototype.search_results_touchmove = function(evt) {
				return this.touch_started = !1, this.search_results_mouseout(evt)
			}, AbstractChosen.prototype.search_results_touchend = function(evt) {
				return this.touch_started ? this.search_results_mouseup(evt) : void 0
			}, AbstractChosen.prototype.outerHTML = function(element) {
				var tmp;
				return element.outerHTML ? element.outerHTML : (tmp = document.createElement("div"), tmp.appendChild(element), tmp.innerHTML)
			}, AbstractChosen.browser_is_supported = function() {
				return "Microsoft Internet Explorer" === window.navigator.appName ? document.documentMode >= 8 : /iP(od|hone)/i.test(window.navigator.userAgent) ? !1 : /Android/i.test(window.navigator.userAgent) && /Mobile/i.test(window.navigator.userAgent) ? !1 : !0
			}, AbstractChosen.default_multiple_text = "Select Some Options", AbstractChosen.default_single_text = "Select an Option", AbstractChosen.default_no_result_text = "No results match", AbstractChosen
		}(), $ = jQuery, $.fn.extend({
			chosen: function(options) {
				return AbstractChosen.browser_is_supported() ? this.each(function() {
					var $this, chosen;
					$this = $(this), chosen = $this.data("chosen"), "destroy" === options && chosen ? chosen.destroy() : chosen || $this.data("chosen", new Chosen(this, options))
				}) : this
			}
		}), Chosen = function(_super) {
			function Chosen() {
				return _ref = Chosen.__super__.constructor.apply(this, arguments)
			}
			return __extends(Chosen, _super), Chosen.prototype.setup = function() {
				return this.form_field_jq = $(this.form_field), this.current_selectedIndex = this.form_field.selectedIndex, this.is_rtl = this.form_field_jq.hasClass("chosen-rtl")
			}, Chosen.prototype.set_up_html = function() {
				var container_classes, container_props;
				return container_classes = ["chosen-container"], container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single")), this.inherit_select_classes && this.form_field.className && container_classes.push(this.form_field.className), this.is_rtl && container_classes.push("chosen-rtl"), container_props = {
					"class": container_classes.join(" "),
					style: "width: " + this.container_width() + ";",
					title: this.form_field.title
				}, this.form_field.id.length && (container_props.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen"), this.container = $("<div />", container_props), this.container.html(this.is_multiple ? '<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>' : '<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'), this.form_field_jq.hide().after(this.container), this.dropdown = this.container.find("div.chosen-drop").first(), this.search_field = this.container.find("input").first(), this.search_results = this.container.find("ul.chosen-results").first(), this.search_field_scale(), this.search_no_results = this.container.find("li.no-results").first(), this.is_multiple ? (this.search_choices = this.container.find("ul.chosen-choices").first(), this.search_container = this.container.find("li.search-field").first()) : (this.search_container = this.container.find("div.chosen-search").first(), this.selected_item = this.container.find(".chosen-single").first()), this.results_build(), this.set_tab_index(), this.set_label_behavior(), this.form_field_jq.trigger("chosen:ready", {
					chosen: this
				})
			}, Chosen.prototype.register_observers = function() {
				var _this = this;
				return this.container.bind("mousedown.chosen", function(evt) {
					_this.container_mousedown(evt)
				}), this.container.bind("mouseup.chosen", function(evt) {
					_this.container_mouseup(evt)
				}), this.container.bind("mouseenter.chosen", function(evt) {
					_this.mouse_enter(evt)
				}), this.container.bind("mouseleave.chosen", function(evt) {
					_this.mouse_leave(evt)
				}), this.search_results.bind("mouseup.chosen", function(evt) {
					_this.search_results_mouseup(evt)
				}), this.search_results.bind("mouseover.chosen", function(evt) {
					_this.search_results_mouseover(evt)
				}), this.search_results.bind("mouseout.chosen", function(evt) {
					_this.search_results_mouseout(evt)
				}), this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen", function(evt) {
					_this.search_results_mousewheel(evt)
				}), this.search_results.bind("touchstart.chosen", function(evt) {
					_this.search_results_touchstart(evt)
				}), this.search_results.bind("touchmove.chosen", function(evt) {
					_this.search_results_touchmove(evt)
				}), this.search_results.bind("touchend.chosen", function(evt) {
					_this.search_results_touchend(evt)
				}), this.form_field_jq.bind("chosen:updated.chosen", function(evt) {
					_this.results_update_field(evt)
				}), this.form_field_jq.bind("chosen:activate.chosen", function(evt) {
					_this.activate_field(evt)
				}), this.form_field_jq.bind("chosen:open.chosen", function(evt) {
					_this.container_mousedown(evt)
				}), this.form_field_jq.bind("chosen:close.chosen", function(evt) {
					_this.input_blur(evt)
				}), this.search_field.bind("blur.chosen", function(evt) {
					_this.input_blur(evt)
				}), this.search_field.bind("keyup.chosen", function(evt) {
					_this.keyup_checker(evt)
				}), this.search_field.bind("keydown.chosen", function(evt) {
					_this.keydown_checker(evt)
				}), this.search_field.bind("focus.chosen", function(evt) {
					_this.input_focus(evt)
				}), this.search_field.bind("cut.chosen", function(evt) {
					_this.clipboard_event_checker(evt)
				}), this.search_field.bind("paste.chosen", function(evt) {
					_this.clipboard_event_checker(evt)
				}), this.is_multiple ? this.search_choices.bind("click.chosen", function(evt) {
					_this.choices_click(evt)
				}) : this.container.bind("click.chosen", function(evt) {
					evt.preventDefault()
				})
			}, Chosen.prototype.destroy = function() {
				return $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action), this.search_field[0].tabIndex && (this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex), this.container.remove(), this.form_field_jq.removeData("chosen"), this.form_field_jq.show()
			}, Chosen.prototype.search_field_disabled = function() {
				return this.is_disabled = this.form_field_jq[0].disabled, this.is_disabled ? (this.container.addClass("chosen-disabled"), this.search_field[0].disabled = !0, this.is_multiple || this.selected_item.unbind("focus.chosen", this.activate_action), this.close_field()) : (this.container.removeClass("chosen-disabled"), this.search_field[0].disabled = !1, this.is_multiple ? void 0 : this.selected_item.bind("focus.chosen", this.activate_action))
			}, Chosen.prototype.container_mousedown = function(evt) {
				return this.is_disabled || (evt && "mousedown" === evt.type && !this.results_showing && evt.preventDefault(), null != evt && $(evt.target).hasClass("search-choice-close")) ? void 0 : (this.active_field ? this.is_multiple || !evt || $(evt.target)[0] !== this.selected_item[0] && !$(evt.target).parents("a.chosen-single").length || (evt.preventDefault(), this.results_toggle()) : (this.is_multiple && this.search_field.val(""), $(this.container[0].ownerDocument).bind("click.chosen", this.click_test_action), this.results_show()), this.activate_field())
			}, Chosen.prototype.container_mouseup = function(evt) {
				return "ABBR" !== evt.target.nodeName || this.is_disabled ? void 0 : this.results_reset(evt)
			}, Chosen.prototype.search_results_mousewheel = function(evt) {
				var delta;
				return evt.originalEvent && (delta = -evt.originalEvent.wheelDelta || evt.originalEvent.detail), null != delta ? (evt.preventDefault(), "DOMMouseScroll" === evt.type && (delta = 40 * delta), this.search_results.scrollTop(delta + this.search_results.scrollTop())) : void 0
			}, Chosen.prototype.blur_test = function() {
				return !this.active_field && this.container.hasClass("chosen-container-active") ? this.close_field() : void 0
			}, Chosen.prototype.close_field = function() {
				return $(this.container[0].ownerDocument).unbind("click.chosen", this.click_test_action), this.active_field = !1, this.results_hide(), this.container.removeClass("chosen-container-active"), this.clear_backstroke(), this.show_search_field_default(), this.search_field_scale()
			}, Chosen.prototype.activate_field = function() {
				return this.container.addClass("chosen-container-active"), this.active_field = !0, this.search_field.val(this.search_field.val()), this.search_field.focus()
			}, Chosen.prototype.test_active_click = function(evt) {
				var active_container;
				return active_container = $(evt.target).closest(".chosen-container"), active_container.length && this.container[0] === active_container[0] ? this.active_field = !0 : this.close_field()
			}, Chosen.prototype.results_build = function() {
				return this.parsing = !0, this.selected_option_count = null, this.results_data = SelectParser.select_to_array(this.form_field), this.is_multiple ? this.search_choices.find("li.search-choice").remove() : this.is_multiple || (this.single_set_selected_text(), this.disable_search || this.form_field.options.length <= this.disable_search_threshold ? (this.search_field[0].readOnly = !0, this.container.addClass("chosen-container-single-nosearch")) : (this.search_field[0].readOnly = !1, this.container.removeClass("chosen-container-single-nosearch"))), this.update_results_content(this.results_option_build({
					first: !0
				})), this.search_field_disabled(), this.show_search_field_default(), this.search_field_scale(), this.parsing = !1
			}, Chosen.prototype.result_do_highlight = function(el) {
				var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
				if (el.length) {
					if (this.result_clear_highlight(), this.result_highlight = el, this.result_highlight.addClass("highlighted"), maxHeight = parseInt(this.search_results.css("maxHeight"), 10), visible_top = this.search_results.scrollTop(), visible_bottom = maxHeight + visible_top, high_top = this.result_highlight.position().top + this.search_results.scrollTop(), high_bottom = high_top + this.result_highlight.outerHeight(), high_bottom >= visible_bottom) return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);

					if (visible_top > high_top) return this.search_results.scrollTop(high_top)
				}
			}, Chosen.prototype.result_clear_highlight = function() {
				return this.result_highlight && this.result_highlight.removeClass("highlighted"), this.result_highlight = null
			}, Chosen.prototype.results_show = function() {
				return this.is_multiple && this.max_selected_options <= this.choices_count() ? (this.form_field_jq.trigger("chosen:maxselected", {
					chosen: this
				}), !1) : (this.container.addClass("chosen-with-drop"), this.results_showing = !0, this.search_field.focus(), this.search_field.val(this.search_field.val()), this.winnow_results(), this.form_field_jq.trigger("chosen:showing_dropdown", {
					chosen: this
				}))
			}, Chosen.prototype.update_results_content = function(content) {
				return this.search_results.html(content)
			}, Chosen.prototype.results_hide = function() {
				return this.results_showing && (this.result_clear_highlight(), this.container.removeClass("chosen-with-drop"), this.form_field_jq.trigger("chosen:hiding_dropdown", {
					chosen: this
				})), this.results_showing = !1
			}, Chosen.prototype.set_tab_index = function() {
				var ti;
				return this.form_field.tabIndex ? (ti = this.form_field.tabIndex, this.form_field.tabIndex = -1, this.search_field[0].tabIndex = ti) : void 0
			}, Chosen.prototype.set_label_behavior = function() {
				var _this = this;
				return this.form_field_label = this.form_field_jq.parents("label"), !this.form_field_label.length && this.form_field.id.length && (this.form_field_label = $("label[for='" + this.form_field.id + "']")), this.form_field_label.length > 0 ? this.form_field_label.bind("click.chosen", function(evt) {
					return _this.is_multiple ? _this.container_mousedown(evt) : _this.activate_field()
				}) : void 0
			}, Chosen.prototype.show_search_field_default = function() {
				return this.is_multiple && this.choices_count() < 1 && !this.active_field ? (this.search_field.val(this.default_text), this.search_field.addClass("default")) : (this.search_field.val(""), this.search_field.removeClass("default"))
			}, Chosen.prototype.search_results_mouseup = function(evt) {
				var target;
				return target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first(), target.length ? (this.result_highlight = target, this.result_select(evt), this.search_field.focus()) : void 0
			}, Chosen.prototype.search_results_mouseover = function(evt) {
				var target;
				return target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first(), target ? this.result_do_highlight(target) : void 0
			}, Chosen.prototype.search_results_mouseout = function(evt) {
				return $(evt.target).hasClass("active-result") ? this.result_clear_highlight() : void 0
			}, Chosen.prototype.choice_build = function(item) {
				var choice, close_link, _this = this;
				return choice = $("<li />", {
					"class": "search-choice"
				}).html("<span>" + item.html + "</span>"), item.disabled ? choice.addClass("search-choice-disabled") : (close_link = $("<a />", {
					"class": "search-choice-close",
					"data-option-array-index": item.array_index
				}), close_link.bind("click.chosen", function(evt) {
					return _this.choice_destroy_link_click(evt)
				}), choice.append(close_link)), this.search_container.before(choice)
			}, Chosen.prototype.choice_destroy_link_click = function(evt) {
				return evt.preventDefault(), evt.stopPropagation(), this.is_disabled ? void 0 : this.choice_destroy($(evt.target))
			}, Chosen.prototype.choice_destroy = function(link) {
				return this.result_deselect(link[0].getAttribute("data-option-array-index")) ? (this.show_search_field_default(), this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1 && this.results_hide(), link.parents("li").first().remove(), this.search_field_scale()) : void 0
			}, Chosen.prototype.results_reset = function() {
				return this.reset_single_select_options(), this.form_field.options[0].selected = !0, this.single_set_selected_text(), this.show_search_field_default(), this.results_reset_cleanup(), this.form_field_jq.trigger("change"), this.active_field ? this.results_hide() : void 0
			}, Chosen.prototype.results_reset_cleanup = function() {
				return this.current_selectedIndex = this.form_field.selectedIndex, this.selected_item.find("abbr").remove()
			}, Chosen.prototype.result_select = function(evt) {
				var high, item;
				return this.result_highlight ? (high = this.result_highlight, this.result_clear_highlight(), this.is_multiple && this.max_selected_options <= this.choices_count() ? (this.form_field_jq.trigger("chosen:maxselected", {
					chosen: this
				}), !1) : (this.is_multiple ? high.removeClass("active-result") : this.reset_single_select_options(), item = this.results_data[high[0].getAttribute("data-option-array-index")], item.selected = !0, this.form_field.options[item.options_index].selected = !0, this.selected_option_count = null, this.is_multiple ? this.choice_build(item) : this.single_set_selected_text(item.text), (evt.metaKey || evt.ctrlKey) && this.is_multiple || this.results_hide(), this.search_field.val(""), (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) && this.form_field_jq.trigger("change", {
					selected: this.form_field.options[item.options_index].value
				}), this.current_selectedIndex = this.form_field.selectedIndex, this.search_field_scale())) : void 0
			}, Chosen.prototype.single_set_selected_text = function(text) {
				return null == text && (text = this.default_text), text === this.default_text ? this.selected_item.addClass("chosen-default") : (this.single_deselect_control_build(), this.selected_item.removeClass("chosen-default")), this.selected_item.find("span").text(text)
			}, Chosen.prototype.result_deselect = function(pos) {
				var result_data;
				return result_data = this.results_data[pos], this.form_field.options[result_data.options_index].disabled ? !1 : (result_data.selected = !1, this.form_field.options[result_data.options_index].selected = !1, this.selected_option_count = null, this.result_clear_highlight(), this.results_showing && this.winnow_results(), this.form_field_jq.trigger("change", {
					deselected: this.form_field.options[result_data.options_index].value
				}), this.search_field_scale(), !0)
			}, Chosen.prototype.single_deselect_control_build = function() {
				return this.allow_single_deselect ? (this.selected_item.find("abbr").length || this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'), this.selected_item.addClass("chosen-single-with-deselect")) : void 0
			}, Chosen.prototype.get_search_text = function() {
				return this.search_field.val() === this.default_text ? "" : $("<div/>").text($.trim(this.search_field.val())).html()
			}, Chosen.prototype.winnow_results_set_highlight = function() {
				var do_high, selected_results;
				return selected_results = this.is_multiple ? [] : this.search_results.find(".result-selected.active-result"), do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first(), null != do_high ? this.result_do_highlight(do_high) : void 0
			}, Chosen.prototype.no_results = function(terms) {
				var no_results_html;
				return no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>'), no_results_html.find("span").first().html(terms), this.search_results.append(no_results_html), this.form_field_jq.trigger("chosen:no_results", {
					chosen: this
				})
			}, Chosen.prototype.no_results_clear = function() {
				return this.search_results.find(".no-results").remove()
			}, Chosen.prototype.keydown_arrow = function() {
				var next_sib;
				return this.results_showing && this.result_highlight ? (next_sib = this.result_highlight.nextAll("li.active-result").first()) ? this.result_do_highlight(next_sib) : void 0 : this.results_show()
			}, Chosen.prototype.keyup_arrow = function() {
				var prev_sibs;
				return this.results_showing || this.is_multiple ? this.result_highlight ? (prev_sibs = this.result_highlight.prevAll("li.active-result"), prev_sibs.length ? this.result_do_highlight(prev_sibs.first()) : (this.choices_count() > 0 && this.results_hide(), this.result_clear_highlight())) : void 0 : this.results_show()
			}, Chosen.prototype.keydown_backstroke = function() {
				var next_available_destroy;
				return this.pending_backstroke ? (this.choice_destroy(this.pending_backstroke.find("a").first()), this.clear_backstroke()) : (next_available_destroy = this.search_container.siblings("li.search-choice").last(), next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled") ? (this.pending_backstroke = next_available_destroy, this.single_backstroke_delete ? this.keydown_backstroke() : this.pending_backstroke.addClass("search-choice-focus")) : void 0)
			}, Chosen.prototype.clear_backstroke = function() {
				return this.pending_backstroke && this.pending_backstroke.removeClass("search-choice-focus"), this.pending_backstroke = null
			}, Chosen.prototype.keydown_checker = function(evt) {
				var stroke, _ref1;
				switch (stroke = null != (_ref1 = evt.which) ? _ref1 : evt.keyCode, this.search_field_scale(), 8 !== stroke && this.pending_backstroke && this.clear_backstroke(), stroke) {
					case 8:
						this.backstroke_length = this.search_field.val().length;
						break;
					case 9:
						this.results_showing && !this.is_multiple && this.result_select(evt), this.mouse_on_container = !1;
						break;
					case 13:
						evt.preventDefault();
						break;
					case 38:
						evt.preventDefault(), this.keyup_arrow();
						break;
					case 40:
						evt.preventDefault(), this.keydown_arrow()
				}
			}, Chosen.prototype.search_field_scale = function() {
				var div, f_width, h, style, style_block, styles, w, _i, _len;
				if (this.is_multiple) {
					for (h = 0, w = 0, style_block = "position:absolute; left: -1000px; top: -1000px; display:none;", styles = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"], _i = 0, _len = styles.length; _len > _i; _i++) style = styles[_i], style_block += style + ":" + this.search_field.css(style) + ";";
					return div = $("<div />", {
						style: style_block
					}), div.text(this.search_field.val()), $("body").append(div), w = div.width() + 25, div.remove(), f_width = this.container.outerWidth(), w > f_width - 10 && (w = f_width - 10), 130 > w && (w = 130), this.search_field.css({
						width: w + "px"
					})
				}
			}, Chosen
		}(AbstractChosen)
	}.call(this),
	function($) {
		var MAIN_TEMPLATE_1 = '{preview}\n<div class="input-group {class}">\n   {caption}\n   <div class="input-group-btn">\n       {remove}\n       {upload}\n       {browse}\n   </div>\n</div>',
			MAIN_TEMPLATE_2 = "{preview}\n{remove}\n{upload}\n{browse}\n",
			PREVIEW_TEMPLATE = '<div class="file-preview {class}">\n   <div class="close fileinput-remove text-right">&times;</div>\n   <div class="file-preview-thumbnails"></div>\n   <div class="clearfix"></div>   <div class="file-preview-status text-center text-success"></div>\n</div>',
			CAPTION_TEMPLATE = '<div tabindex="-1" class="form-control file-caption {class}">\n   <span class="glyphicon glyphicon-file kv-caption-icon"></span><div class="file-caption-name"></div>\n</div>',
			MODAL_TEMPLATE = '<div id="{id}" class="modal fade">\n  <div class="modal-dialog modal-lg">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>\n        <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n      </div>\n      <div class="modal-body">\n        <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n      </div>\n    </div>\n  </div>\n</div>\n',
			IMAGE_TEMPLATE = '<div class="file-preview-frame" id="{previewId}">\n   {content}\n</div>\n',
			TEXT_TEMPLATE = '<div class="file-preview-frame" id="{previewId}">\n   <div class="file-preview-text" title="{caption}">\n       {strText}\n   </div>\n</div>\n',
			OTHER_TEMPLATE = '<div class="file-preview-frame" id="{previewId}">\n   <div class="file-preview-other">\n       <h2><i class="glyphicon glyphicon-file"></i></h2>\n           {caption}\n   </div>\n</div>',
			isEmpty = function(value, trim) {
				return null === value || void 0 === value || value == [] || "" === value || trim && "" === $.trim(value)
			},
			isArray = Array.isArray || function(a) {
				return "[object Array]" === Object.prototype.toString.call(a)
			},
			getElement = function(options, param, value) {
				return isEmpty(options) || isEmpty(options[param]) ? value : $(options[param])
			},
			isImageFile = function(type, name) {
				return "undefined" != typeof type ? type.match("image.*") : name.match(/\.(gif|png|jpe?g)$/i)
			},
			isTextFile = function(type, name) {
				return "undefined" != typeof type ? type.match("text.*") : name.match(/\.(txt|md|csv|htm|html|php|ini)$/i)
			},
			uniqId = function() {
				return Math.round((new Date).getTime() + 100 * Math.random())
			},
			hasFileAPISupport = function() {
				return window.File && window.FileReader && window.FileList && window.Blob
			},
			vUrl = window.URL || window.webkitURL,
			FileInput = function(element, options) {
				this.$element = $(element), hasFileAPISupport() ? (this.init(options), this.listen()) : this.$element.removeClass("file-loading")
			};
		FileInput.prototype = {
			constructor: FileInput,
			init: function(options) {
				var self = this;
				self.reader = null, self.showCaption = options.showCaption, self.showPreview = options.showPreview, self.maxFileSize = options.maxFileSize, self.maxFileCount = options.maxFileCount, self.msgSizeTooLarge = options.msgSizeTooLarge, self.msgFilesTooMany = options.msgFilesTooMany, self.msgFileNotFound = options.msgFileNotFound, self.msgFileNotReadable = options.msgFileNotReadable, self.msgFilePreviewAborted = options.msgFilePreviewAborted, self.msgFilePreviewError = options.msgFilePreviewError, self.msgValidationError = options.msgValidationError, self.msgErrorClass = options.msgErrorClass, self.initialDelimiter = options.initialDelimiter, self.initialPreview = options.initialPreview, self.initialCaption = options.initialCaption, self.initialPreviewCount = options.initialPreviewCount, self.initialPreviewContent = options.initialPreviewContent, self.overwriteInitial = options.overwriteInitial, self.showRemove = options.showRemove, self.showUpload = options.showUpload, self.captionClass = options.captionClass, self.previewClass = options.previewClass, self.mainClass = options.mainClass, self.mainTemplate = isEmpty(options.mainTemplate) ? self.showCaption ? MAIN_TEMPLATE_1 : MAIN_TEMPLATE_2 : options.mainTemplate, self.previewTemplate = self.showPreview ? options.previewTemplate : "", self.previewGenericTemplate = options.previewGenericTemplate, self.previewImageTemplate = options.previewImageTemplate, self.previewTextTemplate = options.previewTextTemplate, self.previewOtherTemplate = options.previewOtherTemplate, self.captionTemplate = options.captionTemplate, self.browseLabel = options.browseLabel, self.browseIcon = options.browseIcon, self.browseClass = options.browseClass, self.removeLabel = options.removeLabel, self.removeIcon = options.removeIcon, self.removeClass = options.removeClass, self.uploadLabel = options.uploadLabel, self.uploadIcon = options.uploadIcon, self.uploadClass = options.uploadClass, self.uploadUrl = options.uploadUrl, self.msgLoading = options.msgLoading, self.msgProgress = options.msgProgress, self.msgSelected = options.msgSelected, self.previewFileType = options.previewFileType, self.wrapTextLength = options.wrapTextLength, self.wrapIndicator = options.wrapIndicator, self.isError = !1, self.isDisabled = self.$element.attr("disabled") || self.$element.attr("readonly"), isEmpty(self.$element.attr("id")) && self.$element.attr("id", uniqId()), "undefined" == typeof self.$container ? self.$container = self.createContainer() : self.refreshContainer(), self.$captionContainer = getElement(options, "elCaptionContainer", self.$container.find(".file-caption")), self.$caption = getElement(options, "elCaptionText", self.$container.find(".file-caption-name")), self.$previewContainer = getElement(options, "elPreviewContainer", self.$container.find(".file-preview")), self.$preview = getElement(options, "elPreviewImage", self.$container.find(".file-preview-thumbnails")), self.$previewStatus = getElement(options, "elPreviewStatus", self.$container.find(".file-preview-status"));
				var content = self.initialPreview;
				self.initialPreviewCount = isArray(content) ? content.length : content.length > 0 ? content.split(self.initialDelimiter).length : 0, self.initPreview(), self.original = {
					preview: self.$preview.html(),
					caption: self.$caption.html()
				}, self.options = options, self.$element.removeClass("file-loading")
			},
			listen: function() {
				var self = this,
					$el = self.$element,
					$cap = self.$captionContainer,
					$btnFile = self.$btnFile;
				$el.on("change", $.proxy(self.change, self)), $btnFile.on("click", function() {
					self.clear(!1), $cap.focus()
				}), $($el[0].form).on("reset", $.proxy(self.reset, self)), self.$container.on("click", ".fileinput-remove:not([disabled])", $.proxy(self.clear, self))
			},
			refresh: function(options) {
				var self = this,
					params = arguments.length ? $.extend(self.options, options) : self.options;
				self.init(params)
			},
			initPreview: function() {
				var self = this,
					html = "",
					content = self.initialPreview,
					len = self.initialPreviewCount,
					cap = self.initialCaption.length,
					previewId = "preview-" + uniqId(),
					caption = cap > 0 ? self.initialCaption : self.msgSelected.replace("{n}", len);
				if (isArray(content) && len > 0) {
					for (var i = 0; len > i; i++) previewId += "-" + i, html += self.previewGenericTemplate.replace("{previewId}", previewId).replace("{content}", content[i]);
					len > 1 && 0 == cap && (caption = self.msgSelected.replace("{n}", len))
				} else {
					if (!(len > 0)) return cap > 0 ? (self.$caption.html(caption), void self.$captionContainer.attr("title", caption)) : void 0;
					for (var fileList = content.split(self.initialDelimiter), i = 0; len > i; i++) previewId += "-" + i, html += self.previewGenericTemplate.replace("{previewId}", previewId).replace("{content}", fileList[i]);
					len > 1 && 0 == cap && (caption = self.msgSelected.replace("{n}", len))
				}
				self.initialPreviewContent = html, self.$preview.html(html), self.$caption.html(caption), self.$captionContainer.attr("title", caption), self.$container.removeClass("file-input-new")
			},
			clear: function(e) {
				var self = this;
				if (e && e.preventDefault(), self.reader instanceof FileReader && self.reader.abort(), self.$element.val(""), self.resetErrors(!0), e !== !1 && (self.$element.trigger("change"), self.$element.trigger("fileclear")), self.overwriteInitial && (self.initialPreviewCount = 0), self.overwriteInitial || isEmpty(self.initialPreviewContent)) {
					self.$preview.html("");
					var cap = !self.overwriteInitial && self.initialCaption.length > 0 ? self.original.caption : "";
					self.$caption.html(cap), self.$captionContainer.attr("title", ""), self.$container.removeClass("file-input-new").addClass("file-input-new")
				} else self.showFileIcon(), self.$preview.html(self.original.preview), self.$caption.html(self.original.caption), self.$container.removeClass("file-input-new");
				self.hideFileIcon(), self.$element.trigger("filecleared"), self.$captionContainer.focus()
			},
			reset: function() {
				var self = this;
				self.clear(!1), self.$preview.html(self.original.preview), self.$caption.html(self.original.caption), self.$container.find(".fileinput-filename").text(""), self.$element.trigger("filereset"), self.initialPreview.length > 0 && self.$container.removeClass("file-input-new")
			},
			disable: function() {
				var self = this;
				self.isDisabled = !0, self.$element.attr("disabled", "disabled"), self.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled"), self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").attr("disabled", !0)
			},
			enable: function() {
				var self = this;
				self.isDisabled = !1, self.$element.removeAttr("disabled"), self.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled"), self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").removeAttr("disabled")
			},
			hideFileIcon: function() {
				this.overwriteInitial && this.$captionContainer.find(".kv-caption-icon").hide()
			},
			showFileIcon: function() {
				this.$captionContainer.find(".kv-caption-icon").show()
			},
			resetErrors: function(fade) {
				var self = this,
					$error = self.$previewContainer.find(".kv-fileinput-error");
				self.isError = !1, fade ? $error.fadeOut("slow") : $error.remove()
			},
			showError: function(msg, file, previewId, index) {
				var self = this,
					$error = self.$previewContainer.find(".kv-fileinput-error");
				return isEmpty($error.attr("class")) ? self.$previewContainer.append('<div class="kv-fileinput-error ' + self.msgErrorClass + '">' + msg + "</div>") : $error.html(msg), $error.hide(), $error.fadeIn(800), self.$element.trigger("fileerror", [file, previewId, index]), self.$element.val(""), !0
			},
			errorHandler: function(evt, caption) {
				var self = this;
				switch (evt.target.error.code) {
					case evt.target.error.NOT_FOUND_ERR:
						self.addError(self.msgFileNotFound.replace("{name}", caption));
						break;
					case evt.target.error.NOT_READABLE_ERR:
						self.addError(self.msgFileNotReadable.replace("{name}", caption));
						break;
					case evt.target.error.ABORT_ERR:
						self.addError(self.msgFilePreviewAborted.replace("{name}", caption));
						break;
					default:
						self.addError(self.msgFilePreviewError.replace("{name}", caption))
				}
			},
			loadImage: function(file, caption) {
				var self = this,
					$img = $(document.createElement("img"));
				$img.attr({
					src: vUrl.createObjectURL(file),
					"class": "file-preview-image",
					title: caption,
					alt: caption,
					onload: function() {
						vUrl.revokeObjectURL($img.src)
					}
				}), $img.width() >= self.$preview.width() && $img.attr({
					width: "100%",
					height: "auto"
				});
				var $imgContent = $(document.createElement("div")).append($img);
				return $imgContent.html()
			},
			readFiles: function(files) {
				function readFile(i) {
					if (i >= numFiles) return $container.removeClass("loading"), void $status.html("");
					var previewId = previewInitId + "-" + i,
						file = files[i],
						caption = file.name,
						isImg = isImageFile(file.type, file.name),
						isTxt = isTextFile(file.type, file.name),
						fileSize = (file.size ? file.size : 0) / 1e3;
					if (fileSize = fileSize.toFixed(2), self.maxFileSize > 0 && fileSize > self.maxFileSize) {
						var msg = self.msgSizeTooLarge.replace("{name}", caption).replace("{size}", fileSize).replace("{maxSize}", self.maxFileSize);
						return void(self.isError = self.showError(msg, file, previewId, i))
					}
					$preview.length > 0 && ("any" == fileType ? isImg || isTxt : "text" == fileType ? isTxt : isImg) && "undefined" != typeof FileReader ? ($status.html(msgLoading.replace("{index}", i + 1).replace("{files}", numFiles)), $container.addClass("loading"), reader.onerror = function(evt) {
						self.errorHandler(evt, caption)
					}, reader.onload = function(theFile) {
						var content = "",
							modal = "";
						if (isTxt) {
							var strText = theFile.target.result;
							if (strText.length > wrapLen) {
								var id = uniqId(),
									height = .75 * window.innerHeight,
									modal = MODAL_TEMPLATE.replace("{id}", id).replace("{title}", caption).replace("{body}", strText).replace("{height}", height);
								wrapInd = wrapInd.replace("{title}", caption).replace("{dialog}", "$('#" + id + "').modal('show')"), strText = strText.substring(0, wrapLen - 1) + wrapInd
							}
							content = self.previewTextTemplate.replace("{previewId}", previewId).replace("{caption}", caption).replace("{strText}", strText) + modal
						} else content = self.previewImageTemplate.replace("{previewId}", previewId).replace("{content}", self.loadImage(file, caption));
						$preview.append("\n" + content)
					}, reader.onloadend = function() {
						var msg = msgProgress.replace("{index}", i + 1).replace("{files}", numFiles).replace("{percent}", 100).replace("{name}", file.name);
						setTimeout(function() {
							$status.html(msg)
						}, 1e3), setTimeout(function() {
							readFile(i + 1)
						}, 1500), $el.trigger("fileloaded", [file, previewId, i])
					}, reader.onprogress = function(data) {
						if (data.lengthComputable) {
							var progress = parseInt(data.loaded / data.total * 100, 10),
								msg = msgProgress.replace("{index}", i + 1).replace("{files}", numFiles).replace("{percent}", progress).replace("{name}", file.name);
							setTimeout(function() {
								$status.html(msg)
							}, 1e3)
						}
					}, isTxt ? reader.readAsText(file) : reader.readAsArrayBuffer(file)) : ($preview.append("\n" + self.previewOtherTemplate.replace("{previewId}", previewId).replace("{caption}", caption)), $el.trigger("fileloaded", [file, previewId, i]), setTimeout(readFile(i + 1), 1e3))
				}
				this.reader = new FileReader;
				var self = this,
					$el = self.$element,
					$preview = self.$preview,
					reader = self.reader,
					$container = self.$previewContainer,
					$status = self.$previewStatus,
					msgLoading = self.msgLoading,
					msgProgress = self.msgProgress,
					fileType = (self.msgSelected, self.previewFileType),
					wrapLen = parseInt(self.wrapTextLength),
					wrapInd = self.wrapIndicator,
					previewInitId = "preview-" + uniqId(),
					numFiles = files.length;
				readFile(0)
			},
			change: function(e) {
				var tfiles, self = this,
					$el = self.$element,
					label = $el.val().replace(/\\/g, "/").replace(/.*\//, ""),
					total = 0,
					$preview = self.$preview,
					files = $el.get(0).files,
					msgSelected = self.msgSelected,
					numFiles = isEmpty(files) ? 1 : files.length + self.initialPreviewCount;
				if (self.hideFileIcon(), tfiles = void 0 === e.target.files ? e.target && e.target.value ? [{
						name: e.target.value.replace(/^.+\\/, "")
					}] : [] : e.target.files, 0 !== tfiles.length) {
					self.resetErrors(), $preview.html(""), self.overwriteInitial || $preview.html(self.initialPreviewContent);
					var total = tfiles.length;
					if (self.maxFileCount > 0 && total > self.maxFileCount) {
						var msg = self.msgFilesTooMany.replace("{m}", self.maxFileCount).replace("{n}", total);
						return self.isError = self.showError(msg, null, null, null), self.$captionContainer.find(".kv-caption-icon").hide(), self.$caption.html(self.msgValidationError), void self.$container.removeClass("file-input-new")
					}
					self.readFiles(files), self.reader = null;
					var log = numFiles > 1 ? msgSelected.replace("{n}", numFiles) : label;
					self.isError ? (self.$captionContainer.find(".kv-caption-icon").hide(), log = self.msgValidationError) : self.showFileIcon(), self.$caption.html(log), self.$captionContainer.attr("title", log), self.$container.removeClass("file-input-new"), $el.trigger("fileselect", [numFiles, label])
				}
			},
			initBrowse: function($container) {
				var self = this;
				self.$btnFile = $container.find(".btn-file"), self.$btnFile.append(self.$element)
			},
			createContainer: function() {
				var self = this,
					$container = $(document.createElement("span")).attr({
						"class": "file-input file-input-new"
					}).html(self.renderMain());
				return self.$element.before($container), self.initBrowse($container), $container
			},
			refreshContainer: function() {
				var self = this,
					$container = self.$container;
				$container.before(self.$element), $container.html(self.renderMain()), self.initBrowse($container)
			},
			renderMain: function() {
				var self = this,
					preview = self.previewTemplate.replace("{class}", self.previewClass),
					css = self.isDisabled ? self.captionClass + " file-caption-disabled" : self.captionClass,
					caption = self.captionTemplate.replace("{class}", css + " kv-fileinput-caption");
				return self.mainTemplate.replace("{class}", self.mainClass).replace("{preview}", preview).replace("{caption}", caption).replace("{upload}", self.renderUpload()).replace("{remove}", self.renderRemove()).replace("{browse}", self.renderBrowse())
			},
			renderBrowse: function() {
				var self = this,
					css = self.browseClass + " btn-file",
					status = "";
				return self.isDisabled && (status = " disabled "), '<div class="' + css + '"' + status + "> " + self.browseIcon + self.browseLabel + " </div>"
			},
			renderRemove: function() {
				var self = this,
					css = self.removeClass + " fileinput-remove fileinput-remove-button",
					status = "";
				return self.showRemove ? (self.isDisabled && (status = " disabled "), '<button type="button" class="' + css + '"' + status + ">" + self.removeIcon + self.removeLabel + "</button>") : ""
			},
			renderUpload: function() {
				var self = this,
					css = self.uploadClass + " kv-fileinput-upload",
					content = "",
					status = "";
				return self.showUpload ? (self.isDisabled && (status = " disabled "), content = isEmpty(self.uploadUrl) ? '<button type="submit" class="' + css + '"' + status + ">" + self.uploadIcon + self.uploadLabel + "</button>" : '<a href="' + self.uploadUrl + '" class="' + self.uploadClass + '"' + status + ">" + self.uploadIcon + self.uploadLabel + "</a>") : ""
			}
		}, $.fn.fileinput = function(options) {
			return this.each(function() {
				var $this = $(this),
					data = $this.data("fileinput");
				data || $this.data("fileinput", data = new FileInput(this, options)), "string" == typeof options && data[options]()
			})
		}, $.fn.fileinput = function(option) {
			var args = Array.apply(null, arguments);
			return args.shift(), this.each(function() {
				var $this = $(this),
					data = $this.data("fileinput"),
					options = "object" == typeof option && option;
				data || $this.data("fileinput", data = new FileInput(this, $.extend({}, $.fn.fileinput.defaults, options, $(this).data()))), "string" == typeof option && data[option].apply(data, args)
			})
		}, $.fn.fileinput.defaults = {
			showCaption: !0,
			showPreview: !0,
			showRemove: !0,
			showUpload: !0,
			captionClass: "",
			previewClass: "",
			mainClass: "",
			mainTemplate: null,
			initialDelimiter: "*$$*",
			initialPreview: "",
			initialCaption: "",
			initialPreviewCount: 0,
			initialPreviewContent: "",
			overwriteInitial: !0,
			previewTemplate: PREVIEW_TEMPLATE,
			previewGenericTemplate: IMAGE_TEMPLATE,
			previewImageTemplate: IMAGE_TEMPLATE,
			previewTextTemplate: TEXT_TEMPLATE,
			previewOtherTemplate: OTHER_TEMPLATE,
			captionTemplate: CAPTION_TEMPLATE,
			browseLabel: "Browse &hellip;",
			browseIcon: '<i class="glyphicon glyphicon-folder-open"></i> &nbsp;',
			browseClass: "btn btn-primary",
			removeLabel: "Remove",
			removeIcon: '<i class="glyphicon glyphicon-ban-circle"></i> ',
			removeClass: "btn btn-default",
			uploadLabel: "Upload",
			uploadIcon: '<i class="glyphicon glyphicon-upload"></i> ',
			uploadClass: "btn btn-default",
			uploadUrl: null,
			maxFileSize: 0,
			maxFileCount: 0,
			msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>. Please retry your upload!',
			msgFilesTooMany: "Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>. Please retry your upload!",
			msgFileNotFound: 'File "{name}" not found!',
			msgFileNotReadable: 'File "{name}" is not readable.',
			msgFilePreviewAborted: 'File preview aborted for "{name}".',
			msgFilePreviewError: 'An error occurred while reading the file "{name}".',
			msgValidationError: '<span class="text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i> File Upload Error</span>',
			msgErrorClass: "file-error-message",
			msgLoading: "Loading  file {index} of {files} &hellip;",
			msgProgress: "Loading file {index} of {files} - {name} - {percent}% completed.",
			msgSelected: "{n} files selected",
			previewFileType: "image",
			wrapTextLength: 250,
			wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[&hellip;]</span>',
			elCaptionContainer: null,
			elCaptionText: null,
			elPreviewContainer: null,
			elPreviewImage: null,
			elPreviewStatus: null
		}, $(document).ready(function() {
			var $input = $("input.file[type=file]"),
				count = null != $input.attr("type") ? $input.length : 0;
			count > 0 && $input.fileinput()
		})
	}(window.jQuery),
	function($, undefined) {
		function UTCDate() {
			return new Date(Date.UTC.apply(Date, arguments))
		}

		function UTCToday() {
			var today = new Date;
			return UTCDate(today.getFullYear(), today.getMonth(), today.getDate())
		}

		function alias(method) {
			return function() {
				return this[method].apply(this, arguments)
			}
		}

		function opts_from_el(el, prefix) {
			function re_lower(_, a) {
				return a.toLowerCase()
			}
			var inkey, data = $(el).data(),
				out = {},
				replace = new RegExp("^" + prefix.toLowerCase() + "([A-Z])");
			prefix = new RegExp("^" + prefix.toLowerCase());
			for (var key in data) prefix.test(key) && (inkey = key.replace(replace, re_lower), out[inkey] = data[key]);
			return out
		}

		function opts_from_locale(lang) {
			var out = {};
			if (dates[lang] || (lang = lang.split("-")[0], dates[lang])) {
				var d = dates[lang];
				return $.each(locale_opts, function(i, k) {
					k in d && (out[k] = d[k])
				}), out
			}
		}
		var $window = $(window),
			DateArray = function() {
				var extras = {
					get: function(i) {
						return this.slice(i)[0]
					},
					contains: function(d) {
						for (var val = d && d.valueOf(), i = 0, l = this.length; l > i; i++)
							if (this[i].valueOf() === val) return i;
						return -1
					},
					remove: function(i) {
						this.splice(i, 1)
					},
					replace: function(new_array) {
						new_array && ($.isArray(new_array) || (new_array = [new_array]), this.clear(), this.push.apply(this, new_array))
					},
					clear: function() {
						this.length = 0
					},
					copy: function() {
						var a = new DateArray;
						return a.replace(this), a
					}
				};
				return function() {
					var a = [];
					return a.push.apply(a, arguments), $.extend(a, extras), a
				}
			}(),
			Datepicker = function(element, options) {
				this.dates = new DateArray, this.viewDate = UTCToday(), this.focusDate = null, this._process_options(options), this.element = $(element), this.isInline = !1, this.isInput = this.element.is("input"), this.component = this.element.is(".date") ? this.element.find(".add-on, .input-group-addon, .btn") : !1, this.hasInput = this.component && this.element.find("input").length, this.component && 0 === this.component.length && (this.component = !1), this.picker = $(DPGlobal.template), this._buildEvents(), this._attachEvents(), this.isInline ? this.picker.addClass("datepicker-inline").appendTo(this.element) : this.picker.addClass("datepicker-dropdown dropdown-menu"), this.o.rtl && this.picker.addClass("datepicker-rtl"), this.viewMode = this.o.startView, this.o.calendarWeeks && this.picker.find("tfoot th.today").attr("colspan", function(i, val) {
					return parseInt(val) + 1
				}), this._allow_update = !1, this.setStartDate(this._o.startDate), this.setEndDate(this._o.endDate), this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled), this.fillDow(), this.fillMonths(), this._allow_update = !0, this.update(), this.showMode(), this.isInline && this.show()
			};
		Datepicker.prototype = {
			constructor: Datepicker,
			_process_options: function(opts) {
				this._o = $.extend({}, this._o, opts);
				var o = this.o = $.extend({}, this._o),
					lang = o.language;
				switch (dates[lang] || (lang = lang.split("-")[0], dates[lang] || (lang = defaults.language)), o.language = lang, o.startView) {
					case 2:
					case "decade":
						o.startView = 2;
						break;
					case 1:
					case "year":
						o.startView = 1;
						break;
					default:
						o.startView = 0
				}
				switch (o.minViewMode) {
					case 1:
					case "months":
						o.minViewMode = 1;
						break;
					case 2:
					case "years":
						o.minViewMode = 2;
						break;
					default:
						o.minViewMode = 0
				}
				o.startView = Math.max(o.startView, o.minViewMode), o.multidate !== !0 && (o.multidate = Number(o.multidate) || !1, o.multidate = o.multidate !== !1 ? Math.max(0, o.multidate) : 1), o.multidateSeparator = String(o.multidateSeparator), o.weekStart %= 7,
					o.weekEnd = (o.weekStart + 6) % 7;
				var format = DPGlobal.parseFormat(o.format);
				o.startDate !== -(1 / 0) && (o.startDate = o.startDate ? o.startDate instanceof Date ? this._local_to_utc(this._zero_time(o.startDate)) : DPGlobal.parseDate(o.startDate, format, o.language) : -(1 / 0)), o.endDate !== 1 / 0 && (o.endDate = o.endDate ? o.endDate instanceof Date ? this._local_to_utc(this._zero_time(o.endDate)) : DPGlobal.parseDate(o.endDate, format, o.language) : 1 / 0), o.daysOfWeekDisabled = o.daysOfWeekDisabled || [], $.isArray(o.daysOfWeekDisabled) || (o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/)), o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d) {
					return parseInt(d, 10)
				});
				var plc = String(o.orientation).toLowerCase().split(/\s+/g),
					_plc = o.orientation.toLowerCase();
				if (plc = $.grep(plc, function(word) {
						return /^auto|left|right|top|bottom$/.test(word)
					}), o.orientation = {
						x: "auto",
						y: "auto"
					}, _plc && "auto" !== _plc)
					if (1 === plc.length) switch (plc[0]) {
						case "top":
						case "bottom":
							o.orientation.y = plc[0];
							break;
						case "left":
						case "right":
							o.orientation.x = plc[0]
					} else _plc = $.grep(plc, function(word) {
						return /^left|right$/.test(word)
					}), o.orientation.x = _plc[0] || "auto", _plc = $.grep(plc, function(word) {
						return /^top|bottom$/.test(word)
					}), o.orientation.y = _plc[0] || "auto";
					else;
			},
			_events: [],
			_secondaryEvents: [],
			_applyEvents: function(evs) {
				for (var el, ch, ev, i = 0; i < evs.length; i++) el = evs[i][0], 2 === evs[i].length ? (ch = undefined, ev = evs[i][1]) : 3 === evs[i].length && (ch = evs[i][1], ev = evs[i][2]), el.on(ev, ch)
			},
			_unapplyEvents: function(evs) {
				for (var el, ev, ch, i = 0; i < evs.length; i++) el = evs[i][0], 2 === evs[i].length ? (ch = undefined, ev = evs[i][1]) : 3 === evs[i].length && (ch = evs[i][1], ev = evs[i][2]), el.off(ev, ch)
			},
			_buildEvents: function() {
				this.isInput ? this._events = [
					[this.element, {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e) {
							-1 === $.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) && this.update()
						}, this),
						keydown: $.proxy(this.keydown, this)
					}]
				] : this.component && this.hasInput ? this._events = [
					[this.element.find("input"), {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e) {
							-1 === $.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) && this.update()
						}, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				] : this.element.is("div") ? this.isInline = !0 : this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				], this._events.push([this.element, "*", {
					blur: $.proxy(function(e) {
						this._focused_from = e.target
					}, this)
				}], [this.element, {
					blur: $.proxy(function(e) {
						this._focused_from = e.target
					}, this)
				}]), this._secondaryEvents = [
					[this.picker, {
						click: $.proxy(this.click, this)
					}],
					[$(window), {
						resize: $.proxy(this.place, this)
					}],
					[$(document), {
						"mousedown touchstart": $.proxy(function(e) {
							this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.hide()
						}, this)
					}]
				]
			},
			_attachEvents: function() {
				this._detachEvents(), this._applyEvents(this._events)
			},
			_detachEvents: function() {
				this._unapplyEvents(this._events)
			},
			_attachSecondaryEvents: function() {
				this._detachSecondaryEvents(), this._applyEvents(this._secondaryEvents)
			},
			_detachSecondaryEvents: function() {
				this._unapplyEvents(this._secondaryEvents)
			},
			_trigger: function(event, altdate) {
				var date = altdate || this.dates.get(-1),
					local_date = this._utc_to_local(date);
				this.element.trigger({
					type: event,
					date: local_date,
					dates: $.map(this.dates, this._utc_to_local),
					format: $.proxy(function(ix, format) {
						0 === arguments.length ? (ix = this.dates.length - 1, format = this.o.format) : "string" == typeof ix && (format = ix, ix = this.dates.length - 1), format = format || this.o.format;
						var date = this.dates.get(ix);
						return DPGlobal.formatDate(date, format, this.o.language)
					}, this)
				})
			},
			show: function() {
				this.isInline || this.picker.appendTo("body"), this.picker.show(), this.place(), this._attachSecondaryEvents(), this._trigger("show")
			},
			hide: function() {
				this.isInline || this.picker.is(":visible") && (this.focusDate = null, this.picker.hide().detach(), this._detachSecondaryEvents(), this.viewMode = this.o.startView, this.showMode(), this.o.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find("input").val()) && this.setValue(), this._trigger("hide"))
			},
			remove: function() {
				this.hide(), this._detachEvents(), this._detachSecondaryEvents(), this.picker.remove(), delete this.element.data().datepicker, this.isInput || delete this.element.data().date
			},
			_utc_to_local: function(utc) {
				return utc && new Date(utc.getTime() + 6e4 * utc.getTimezoneOffset())
			},
			_local_to_utc: function(local) {
				return local && new Date(local.getTime() - 6e4 * local.getTimezoneOffset())
			},
			_zero_time: function(local) {
				return local && new Date(local.getFullYear(), local.getMonth(), local.getDate())
			},
			_zero_utc_time: function(utc) {
				return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()))
			},
			getDates: function() {
				return $.map(this.dates, this._utc_to_local)
			},
			getUTCDates: function() {
				return $.map(this.dates, function(d) {
					return new Date(d)
				})
			},
			getDate: function() {
				return this._utc_to_local(this.getUTCDate())
			},
			getUTCDate: function() {
				return new Date(this.dates.get(-1))
			},
			setDates: function() {
				var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
				this.update.apply(this, args), this._trigger("changeDate"), this.setValue()
			},
			setUTCDates: function() {
				var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
				this.update.apply(this, $.map(args, this._utc_to_local)), this._trigger("changeDate"), this.setValue()
			},
			setDate: alias("setDates"),
			setUTCDate: alias("setUTCDates"),
			setValue: function() {
				var formatted = this.getFormattedDate();
				this.isInput ? this.element.val(formatted).change() : this.component && this.element.find("input").val(formatted).change()
			},
			getFormattedDate: function(format) {
				format === undefined && (format = this.o.format);
				var lang = this.o.language;
				return $.map(this.dates, function(d) {
					return DPGlobal.formatDate(d, format, lang)
				}).join(this.o.multidateSeparator)
			},
			setStartDate: function(startDate) {
				this._process_options({
					startDate: startDate
				}), this.update(), this.updateNavArrows()
			},
			setEndDate: function(endDate) {
				this._process_options({
					endDate: endDate
				}), this.update(), this.updateNavArrows()
			},
			setDaysOfWeekDisabled: function(daysOfWeekDisabled) {
				this._process_options({
					daysOfWeekDisabled: daysOfWeekDisabled
				}), this.update(), this.updateNavArrows()
			},
			place: function() {
				if (!this.isInline) {
					var calendarWidth = this.picker.outerWidth(),
						calendarHeight = this.picker.outerHeight(),
						visualPadding = 10,
						windowWidth = $window.width(),
						windowHeight = $window.height(),
						scrollTop = $window.scrollTop(),
						zIndex = parseInt(this.element.parents().filter(function() {
							return "auto" !== $(this).css("z-index")
						}).first().css("z-index")) + 10,
						offset = this.component ? this.component.parent().offset() : this.element.offset(),
						height = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!1),
						width = this.component ? this.component.outerWidth(!0) : this.element.outerWidth(!1),
						left = offset.left,
						top = offset.top;
					this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"), "auto" !== this.o.orientation.x ? (this.picker.addClass("datepicker-orient-" + this.o.orientation.x), "right" === this.o.orientation.x && (left -= calendarWidth - width)) : (this.picker.addClass("datepicker-orient-left"), offset.left < 0 ? left -= offset.left - visualPadding : offset.left + calendarWidth > windowWidth && (left = windowWidth - calendarWidth - visualPadding));
					var top_overflow, bottom_overflow, yorient = this.o.orientation.y;
					"auto" === yorient && (top_overflow = -scrollTop + offset.top - calendarHeight, bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight), yorient = Math.max(top_overflow, bottom_overflow) === bottom_overflow ? "top" : "bottom"), this.picker.addClass("datepicker-orient-" + yorient), "top" === yorient ? top += height : top -= calendarHeight + parseInt(this.picker.css("padding-top")), this.picker.css({
						top: top,
						left: left,
						zIndex: zIndex
					})
				}
			},
			_allow_update: !0,
			update: function() {
				if (this._allow_update) {
					var oldDates = this.dates.copy(),
						dates = [],
						fromArgs = !1;
					arguments.length ? ($.each(arguments, $.proxy(function(i, date) {
						date instanceof Date && (date = this._local_to_utc(date)), dates.push(date)
					}, this)), fromArgs = !0) : (dates = this.isInput ? this.element.val() : this.element.data("date") || this.element.find("input").val(), dates = dates && this.o.multidate ? dates.split(this.o.multidateSeparator) : [dates], delete this.element.data().date), dates = $.map(dates, $.proxy(function(date) {
						return DPGlobal.parseDate(date, this.o.format, this.o.language)
					}, this)), dates = $.grep(dates, $.proxy(function(date) {
						return date < this.o.startDate || date > this.o.endDate || !date
					}, this), !0), this.dates.replace(dates), this.dates.length ? this.viewDate = new Date(this.dates.get(-1)) : this.viewDate < this.o.startDate ? this.viewDate = new Date(this.o.startDate) : this.viewDate > this.o.endDate && (this.viewDate = new Date(this.o.endDate)), fromArgs ? this.setValue() : dates.length && String(oldDates) !== String(this.dates) && this._trigger("changeDate"), !this.dates.length && oldDates.length && this._trigger("clearDate"), this.fill()
				}
			},
			fillDow: function() {
				var dowCnt = this.o.weekStart,
					html = "<tr>";
				if (this.o.calendarWeeks) {
					var cell = '<th class="cw">&nbsp;</th>';
					html += cell, this.picker.find(".datepicker-days thead tr:first-child").prepend(cell)
				}
				for (; dowCnt < this.o.weekStart + 7;) html += '<th class="dow">' + dates[this.o.language].daysMin[dowCnt++ % 7] + "</th>";
				html += "</tr>", this.picker.find(".datepicker-days thead").append(html)
			},
			fillMonths: function() {
				for (var html = "", i = 0; 12 > i;) html += '<span class="month">' + dates[this.o.language].monthsShort[i++] + "</span>";
				this.picker.find(".datepicker-months td").html(html)
			},
			setRange: function(range) {
				range && range.length ? this.range = $.map(range, function(d) {
					return d.valueOf()
				}) : delete this.range, this.fill()
			},
			getClassNames: function(date) {
				var cls = [],
					year = this.viewDate.getUTCFullYear(),
					month = this.viewDate.getUTCMonth(),
					today = new Date;
				return date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month ? cls.push("old") : (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) && cls.push("new"), this.focusDate && date.valueOf() === this.focusDate.valueOf() && cls.push("focused"), this.o.todayHighlight && date.getUTCFullYear() === today.getFullYear() && date.getUTCMonth() === today.getMonth() && date.getUTCDate() === today.getDate() && cls.push("today"), -1 !== this.dates.contains(date) && cls.push("active"), (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate || -1 !== $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled)) && cls.push("disabled"), this.range && (date > this.range[0] && date < this.range[this.range.length - 1] && cls.push("range"), -1 !== $.inArray(date.valueOf(), this.range) && cls.push("selected")), cls
			},
			fill: function() {
				var tooltip, d = new Date(this.viewDate),
					year = d.getUTCFullYear(),
					month = d.getUTCMonth(),
					startYear = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCFullYear() : -(1 / 0),
					startMonth = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCMonth() : -(1 / 0),
					endYear = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0,
					endMonth = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0,
					todaytxt = dates[this.o.language].today || dates.en.today || "",
					cleartxt = dates[this.o.language].clear || dates.en.clear || "";
				this.picker.find(".datepicker-days thead th.datepicker-switch").text(dates[this.o.language].months[month] + " " + year), this.picker.find("tfoot th.today").text(todaytxt).toggle(this.o.todayBtn !== !1), this.picker.find("tfoot th.clear").text(cleartxt).toggle(this.o.clearBtn !== !1), this.updateNavArrows(), this.fillMonths();
				var prevMonth = UTCDate(year, month - 1, 28),
					day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
				prevMonth.setUTCDate(day), prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);
				var nextMonth = new Date(prevMonth);
				nextMonth.setUTCDate(nextMonth.getUTCDate() + 42), nextMonth = nextMonth.valueOf();
				for (var clsName, html = []; prevMonth.valueOf() < nextMonth;) {
					if (prevMonth.getUTCDay() === this.o.weekStart && (html.push("<tr>"), this.o.calendarWeeks)) {
						var ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
							th = new Date(Number(ws) + (11 - ws.getUTCDay()) % 7 * 864e5),
							yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (11 - yth.getUTCDay()) % 7 * 864e5),
							calWeek = (th - yth) / 864e5 / 7 + 1;
						html.push('<td class="cw">' + calWeek + "</td>")
					}
					if (clsName = this.getClassNames(prevMonth), clsName.push("day"), this.o.beforeShowDay !== $.noop) {
						var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
						before === undefined ? before = {} : "boolean" == typeof before ? before = {
							enabled: before
						} : "string" == typeof before && (before = {
							classes: before
						}), before.enabled === !1 && clsName.push("disabled"), before.classes && (clsName = clsName.concat(before.classes.split(/\s+/))), before.tooltip && (tooltip = before.tooltip)
					}
					clsName = $.unique(clsName), html.push('<td class="' + clsName.join(" ") + '"' + (tooltip ? ' title="' + tooltip + '"' : "") + ">" + prevMonth.getUTCDate() + "</td>"), prevMonth.getUTCDay() === this.o.weekEnd && html.push("</tr>"), prevMonth.setUTCDate(prevMonth.getUTCDate() + 1)
				}
				this.picker.find(".datepicker-days tbody").empty().append(html.join(""));
				var months = this.picker.find(".datepicker-months").find("th:eq(1)").text(year).end().find("span").removeClass("active");
				$.each(this.dates, function(i, d) {
					d.getUTCFullYear() === year && months.eq(d.getUTCMonth()).addClass("active")
				}), (startYear > year || year > endYear) && months.addClass("disabled"), year === startYear && months.slice(0, startMonth).addClass("disabled"), year === endYear && months.slice(endMonth + 1).addClass("disabled"), html = "", year = 10 * parseInt(year / 10, 10);
				var yearCont = this.picker.find(".datepicker-years").find("th:eq(1)").text(year + "-" + (year + 9)).end().find("td");
				year -= 1;
				for (var classes, years = $.map(this.dates, function(d) {
						return d.getUTCFullYear()
					}), i = -1; 11 > i; i++) classes = ["year"], -1 === i ? classes.push("old") : 10 === i && classes.push("new"), -1 !== $.inArray(year, years) && classes.push("active"), (startYear > year || year > endYear) && classes.push("disabled"), html += '<span class="' + classes.join(" ") + '">' + year + "</span>", year += 1;
				yearCont.html(html)
			},
			updateNavArrows: function() {
				if (this._allow_update) {
					var d = new Date(this.viewDate),
						year = d.getUTCFullYear(),
						month = d.getUTCMonth();
					switch (this.viewMode) {
						case 0:
							this.picker.find(".prev").css(this.o.startDate !== -(1 / 0) && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth() ? {
								visibility: "hidden"
							} : {
								visibility: "visible"
							}), this.picker.find(".next").css(this.o.endDate !== 1 / 0 && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth() ? {
								visibility: "hidden"
							} : {
								visibility: "visible"
							});
							break;
						case 1:
						case 2:
							this.picker.find(".prev").css(this.o.startDate !== -(1 / 0) && year <= this.o.startDate.getUTCFullYear() ? {
								visibility: "hidden"
							} : {
								visibility: "visible"
							}), this.picker.find(".next").css(this.o.endDate !== 1 / 0 && year >= this.o.endDate.getUTCFullYear() ? {
								visibility: "hidden"
							} : {
								visibility: "visible"
							})
					}
				}
			},
			click: function(e) {
				e.preventDefault();
				var year, month, day, target = $(e.target).closest("span, td, th");
				if (1 === target.length) switch (target[0].nodeName.toLowerCase()) {
					case "th":
						switch (target[0].className) {
							case "datepicker-switch":
								this.showMode(1);
								break;
							case "prev":
							case "next":
								var dir = DPGlobal.modes[this.viewMode].navStep * ("prev" === target[0].className ? -1 : 1);
								switch (this.viewMode) {
									case 0:
										this.viewDate = this.moveMonth(this.viewDate, dir), this._trigger("changeMonth", this.viewDate);
										break;
									case 1:
									case 2:
										this.viewDate = this.moveYear(this.viewDate, dir), 1 === this.viewMode && this._trigger("changeYear", this.viewDate)
								}
								this.fill();
								break;
							case "today":
								var date = new Date;
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0), this.showMode(-2);
								var which = "linked" === this.o.todayBtn ? null : "view";
								this._setDate(date, which);
								break;
							case "clear":
								var element;
								this.isInput ? element = this.element : this.component && (element = this.element.find("input")), element && element.val("").change(), this.update(), this._trigger("changeDate"), this.o.autoclose && this.hide()
						}
						break;
					case "span":
						target.is(".disabled") || (this.viewDate.setUTCDate(1), target.is(".month") ? (day = 1, month = target.parent().find("span").index(target), year = this.viewDate.getUTCFullYear(), this.viewDate.setUTCMonth(month), this._trigger("changeMonth", this.viewDate), 1 === this.o.minViewMode && this._setDate(UTCDate(year, month, day))) : (day = 1, month = 0, year = parseInt(target.text(), 10) || 0, this.viewDate.setUTCFullYear(year), this._trigger("changeYear", this.viewDate), 2 === this.o.minViewMode && this._setDate(UTCDate(year, month, day))), this.showMode(-1), this.fill());
						break;
					case "td":
						target.is(".day") && !target.is(".disabled") && (day = parseInt(target.text(), 10) || 1, year = this.viewDate.getUTCFullYear(), month = this.viewDate.getUTCMonth(), target.is(".old") ? 0 === month ? (month = 11, year -= 1) : month -= 1 : target.is(".new") && (11 === month ? (month = 0, year += 1) : month += 1), this._setDate(UTCDate(year, month, day)))
				}
				this.picker.is(":visible") && this._focused_from && $(this._focused_from).focus(), delete this._focused_from
			},
			_toggle_multidate: function(date) {
				var ix = this.dates.contains(date);
				if (date ? -1 !== ix ? this.dates.remove(ix) : this.dates.push(date) : this.dates.clear(), "number" == typeof this.o.multidate)
					for (; this.dates.length > this.o.multidate;) this.dates.remove(0)
			},
			_setDate: function(date, which) {
				which && "date" !== which || this._toggle_multidate(date && new Date(date)), which && "view" !== which || (this.viewDate = date && new Date(date)), this.fill(), this.setValue(), this._trigger("changeDate");
				var element;
				this.isInput ? element = this.element : this.component && (element = this.element.find("input")), element && element.change(), !this.o.autoclose || which && "date" !== which || this.hide()
			},
			moveMonth: function(date, dir) {
				if (!date) return undefined;
				if (!dir) return date;
				var new_month, test, new_date = new Date(date.valueOf()),
					day = new_date.getUTCDate(),
					month = new_date.getUTCMonth(),
					mag = Math.abs(dir);
				if (dir = dir > 0 ? 1 : -1, 1 === mag) test = -1 === dir ? function() {
					return new_date.getUTCMonth() === month
				} : function() {
					return new_date.getUTCMonth() !== new_month
				}, new_month = month + dir, new_date.setUTCMonth(new_month), (0 > new_month || new_month > 11) && (new_month = (new_month + 12) % 12);
				else {
					for (var i = 0; mag > i; i++) new_date = this.moveMonth(new_date, dir);
					new_month = new_date.getUTCMonth(), new_date.setUTCDate(day), test = function() {
						return new_month !== new_date.getUTCMonth()
					}
				}
				for (; test();) new_date.setUTCDate(--day), new_date.setUTCMonth(new_month);
				return new_date
			},
			moveYear: function(date, dir) {
				return this.moveMonth(date, 12 * dir)
			},
			dateWithinRange: function(date) {
				return date >= this.o.startDate && date <= this.o.endDate
			},
			keydown: function(e) {
				if (this.picker.is(":not(:visible)")) return void(27 === e.keyCode && this.show());
				var dir, newDate, newViewDate, dateChanged = !1,
					focusDate = this.focusDate || this.viewDate;
				switch (e.keyCode) {
					case 27:
						this.focusDate ? (this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill()) : this.hide(), e.preventDefault();
						break;
					case 37:
					case 39:
						if (!this.o.keyboardNavigation) break;
						dir = 37 === e.keyCode ? -1 : 1, e.ctrlKey ? (newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir), newViewDate = this.moveYear(focusDate, dir), this._trigger("changeYear", this.viewDate)) : e.shiftKey ? (newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir), newViewDate = this.moveMonth(focusDate, dir), this._trigger("changeMonth", this.viewDate)) : (newDate = new Date(this.dates.get(-1) || UTCToday()), newDate.setUTCDate(newDate.getUTCDate() + dir), newViewDate = new Date(focusDate), newViewDate.setUTCDate(focusDate.getUTCDate() + dir)), this.dateWithinRange(newDate) && (this.focusDate = this.viewDate = newViewDate, this.setValue(), this.fill(), e.preventDefault());
						break;
					case 38:
					case 40:
						if (!this.o.keyboardNavigation) break;
						dir = 38 === e.keyCode ? -1 : 1, e.ctrlKey ? (newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir), newViewDate = this.moveYear(focusDate, dir), this._trigger("changeYear", this.viewDate)) : e.shiftKey ? (newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir), newViewDate = this.moveMonth(focusDate, dir), this._trigger("changeMonth", this.viewDate)) : (newDate = new Date(this.dates.get(-1) || UTCToday()), newDate.setUTCDate(newDate.getUTCDate() + 7 * dir), newViewDate = new Date(focusDate), newViewDate.setUTCDate(focusDate.getUTCDate() + 7 * dir)), this.dateWithinRange(newDate) && (this.focusDate = this.viewDate = newViewDate, this.setValue(), this.fill(), e.preventDefault());
						break;
					case 32:
						break;
					case 13:
						focusDate = this.focusDate || this.dates.get(-1) || this.viewDate, this._toggle_multidate(focusDate), dateChanged = !0, this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.setValue(), this.fill(), this.picker.is(":visible") && (e.preventDefault(), this.o.autoclose && this.hide());
						break;
					case 9:
						this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill(), this.hide()
				}
				if (dateChanged) {
					this._trigger(this.dates.length ? "changeDate" : "clearDate");
					var element;
					this.isInput ? element = this.element : this.component && (element = this.element.find("input")), element && element.change()
				}
			},
			showMode: function(dir) {
				dir && (this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir))), this.picker.find(">div").hide().filter(".datepicker-" + DPGlobal.modes[this.viewMode].clsName).css("display", "block"), this.updateNavArrows()
			}
		};
		var DateRangePicker = function(element, options) {
			this.element = $(element), this.inputs = $.map(options.inputs, function(i) {
				return i.jquery ? i[0] : i
			}), delete options.inputs, $(this.inputs).datepicker(options).bind("changeDate", $.proxy(this.dateUpdated, this)), this.pickers = $.map(this.inputs, function(i) {
				return $(i).data("datepicker")
			}), this.updateDates()
		};
		DateRangePicker.prototype = {
			updateDates: function() {
				this.dates = $.map(this.pickers, function(i) {
					return i.getUTCDate()
				}), this.updateRanges()
			},
			updateRanges: function() {
				var range = $.map(this.dates, function(d) {
					return d.valueOf()
				});
				$.each(this.pickers, function(i, p) {
					p.setRange(range)
				})
			},
			dateUpdated: function(e) {
				if (!this.updating) {
					this.updating = !0;
					var dp = $(e.target).data("datepicker"),
						new_date = dp.getUTCDate(),
						i = $.inArray(e.target, this.inputs),
						l = this.inputs.length;
					if (-1 !== i) {
						if ($.each(this.pickers, function(i, p) {
								p.getUTCDate() || p.setUTCDate(new_date)
							}), new_date < this.dates[i])
							for (; i >= 0 && new_date < this.dates[i];) this.pickers[i--].setUTCDate(new_date);
						else if (new_date > this.dates[i])
							for (; l > i && new_date > this.dates[i];) this.pickers[i++].setUTCDate(new_date);
						this.updateDates(), delete this.updating
					}
				}
			},
			remove: function() {
				$.map(this.pickers, function(p) {
					p.remove()
				}), delete this.element.data().datepicker
			}
		};
		var old = $.fn.datepicker;
		$.fn.datepicker = function(option) {
			var args = Array.apply(null, arguments);
			args.shift();
			var internal_return;
			return this.each(function() {
				var $this = $(this),
					data = $this.data("datepicker"),
					options = "object" == typeof option && option;
				if (!data) {
					var elopts = opts_from_el(this, "date"),
						xopts = $.extend({}, defaults, elopts, options),
						locopts = opts_from_locale(xopts.language),
						opts = $.extend({}, defaults, locopts, elopts, options);
					if ($this.is(".input-daterange") || opts.inputs) {
						var ropts = {
							inputs: opts.inputs || $this.find("input").toArray()
						};
						$this.data("datepicker", data = new DateRangePicker(this, $.extend(opts, ropts)))
					} else $this.data("datepicker", data = new Datepicker(this, opts))
				}
				return "string" == typeof option && "function" == typeof data[option] && (internal_return = data[option].apply(data, args), internal_return !== undefined) ? !1 : void 0
			}), internal_return !== undefined ? internal_return : this
		};
		var defaults = $.fn.datepicker.defaults = {
				autoclose: !1,
				beforeShowDay: $.noop,
				calendarWeeks: !1,
				clearBtn: !1,
				daysOfWeekDisabled: [],
				endDate: 1 / 0,
				forceParse: !0,
				format: "mm/dd/yyyy",
				keyboardNavigation: !0,
				language: "en",
				minViewMode: 0,
				multidate: !1,
				multidateSeparator: ",",
				orientation: "auto",
				rtl: !1,
				startDate: -(1 / 0),
				startView: 0,
				todayBtn: !1,
				todayHighlight: !1,
				weekStart: 0
			},
			locale_opts = $.fn.datepicker.locale_opts = ["format", "rtl", "weekStart"];
		$.fn.datepicker.Constructor = Datepicker;
		var dates = $.fn.datepicker.dates = {
				en: {
					days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
					daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
					daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
					months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
					monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
					today: "Today",
					clear: "Clear"
				}
			},
			DPGlobal = {
				modes: [{
					clsName: "days",
					navFnc: "Month",
					navStep: 1
				}, {
					clsName: "months",
					navFnc: "FullYear",
					navStep: 1
				}, {
					clsName: "years",
					navFnc: "FullYear",
					navStep: 10
				}],
				isLeapYear: function(year) {
					return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
				},
				getDaysInMonth: function(year, month) {
					return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
				},
				validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
				nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
				parseFormat: function(format) {
					var separators = format.replace(this.validParts, "\x00").split("\x00"),
						parts = format.match(this.validParts);
					if (!separators || !separators.length || !parts || 0 === parts.length) throw new Error("Invalid date format.");
					return {
						separators: separators,
						parts: parts
					}
				},
				parseDate: function(date, format, language) {
					function match_part() {
						var m = this.slice(0, parts[i].length),
							p = parts[i].slice(0, m.length);
						return m === p
					}
					if (!date) return undefined;
					if (date instanceof Date) return date;
					"string" == typeof format && (format = DPGlobal.parseFormat(format));
					var part, dir, i, part_re = /([\-+]\d+)([dmwy])/,
						parts = date.match(/([\-+]\d+)([dmwy])/g);
					if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {
						for (date = new Date, i = 0; i < parts.length; i++) switch (part = part_re.exec(parts[i]), dir = parseInt(part[1]), part[2]) {
							case "d":
								date.setUTCDate(date.getUTCDate() + dir);
								break;
							case "m":
								date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
								break;
							case "w":
								date.setUTCDate(date.getUTCDate() + 7 * dir);
								break;
							case "y":
								date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir)
						}
						return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0)
					}
					parts = date && date.match(this.nonpunctuation) || [], date = new Date;
					var val, filtered, parsed = {},
						setters_order = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"],
						setters_map = {
							yyyy: function(d, v) {
								return d.setUTCFullYear(v)
							},
							yy: function(d, v) {
								return d.setUTCFullYear(2e3 + v)
							},
							m: function(d, v) {
								if (isNaN(d)) return d;
								for (v -= 1; 0 > v;) v += 12;
								for (v %= 12, d.setUTCMonth(v); d.getUTCMonth() !== v;) d.setUTCDate(d.getUTCDate() - 1);
								return d
							},
							d: function(d, v) {
								return d.setUTCDate(v)
							}
						};
					setters_map.M = setters_map.MM = setters_map.mm = setters_map.m, setters_map.dd = setters_map.d, date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
					var fparts = format.parts.slice();
					if (parts.length !== fparts.length && (fparts = $(fparts).filter(function(i, p) {
							return -1 !== $.inArray(p, setters_order)
						}).toArray()), parts.length === fparts.length) {
						var cnt;
						for (i = 0, cnt = fparts.length; cnt > i; i++) {
							if (val = parseInt(parts[i], 10), part = fparts[i], isNaN(val)) switch (part) {
								case "MM":
									filtered = $(dates[language].months).filter(match_part), val = $.inArray(filtered[0], dates[language].months) + 1;
									break;
								case "M":
									filtered = $(dates[language].monthsShort).filter(match_part), val = $.inArray(filtered[0], dates[language].monthsShort) + 1
							}
							parsed[part] = val
						}
						var _date, s;
						for (i = 0; i < setters_order.length; i++) s = setters_order[i], s in parsed && !isNaN(parsed[s]) && (_date = new Date(date), setters_map[s](_date, parsed[s]), isNaN(_date) || (date = _date))
					}
					return date
				},
				formatDate: function(date, format, language) {
					if (!date) return "";
					"string" == typeof format && (format = DPGlobal.parseFormat(format));
					var val = {
						d: date.getUTCDate(),
						D: dates[language].daysShort[date.getUTCDay()],
						DD: dates[language].days[date.getUTCDay()],
						m: date.getUTCMonth() + 1,
						M: dates[language].monthsShort[date.getUTCMonth()],
						MM: dates[language].months[date.getUTCMonth()],
						yy: date.getUTCFullYear().toString().substring(2),
						yyyy: date.getUTCFullYear()
					};
					val.dd = (val.d < 10 ? "0" : "") + val.d, val.mm = (val.m < 10 ? "0" : "") + val.m, date = [];
					for (var seps = $.extend([], format.separators), i = 0, cnt = format.parts.length; cnt >= i; i++) seps.length && date.push(seps.shift()), date.push(val[format.parts[i]]);
					return date.join("")
				},
				headTemplate: '<thead><tr><th class="prev">&laquo;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&raquo;</th></tr></thead>',
				contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
				footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
			};
		DPGlobal.template = '<div class="datepicker"><div class="datepicker-days"><table class=" table-condensed">' + DPGlobal.headTemplate + "<tbody></tbody>" + DPGlobal.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + "</table></div></div>", $.fn.datepicker.DPGlobal = DPGlobal, $.fn.datepicker.noConflict = function() {
			return $.fn.datepicker = old, this
		}, $(document).on("focus.datepicker.data-api click.datepicker.data-api", '[data-provide="datepicker"]', function(e) {
			var $this = $(this);
			$this.data("datepicker") || (e.preventDefault(), $this.datepicker("show"))
		}), $(function() {
			$('[data-provide="datepicker-inline"]').datepicker()
		})
	}(window.jQuery),
	function(factory) {
		"function" == typeof define && define.amd ? define(["jquery"], factory) : factory(jQuery)
	}(function($) {
		function _parseSettings(settings) {
			if (settings.minTime && (settings.minTime = _time2int(settings.minTime)), settings.maxTime && (settings.maxTime = _time2int(settings.maxTime)), settings.durationTime && "function" != typeof settings.durationTime && (settings.durationTime = _time2int(settings.durationTime)), "now" == settings.scrollDefault ? settings.scrollDefault = _time2int(new Date) : settings.scrollDefault ? settings.scrollDefault = _time2int(settings.scrollDefault) : settings.minTime && (settings.scrollDefault = settings.minTime), settings.scrollDefault && (settings.scrollDefault = _roundTime(settings.scrollDefault, settings)), settings.timeFormat.match(/[gh]/) && (settings._twelveHourTime = !0), settings.disableTimeRanges.length > 0) {
				for (var i in settings.disableTimeRanges) settings.disableTimeRanges[i] = [_time2int(settings.disableTimeRanges[i][0]), _time2int(settings.disableTimeRanges[i][1])];
				settings.disableTimeRanges = settings.disableTimeRanges.sort(function(a, b) {
					return a[0] - b[0]
				});
				for (var i = settings.disableTimeRanges.length - 1; i > 0; i--) settings.disableTimeRanges[i][0] <= settings.disableTimeRanges[i - 1][1] && (settings.disableTimeRanges[i - 1] = [Math.min(settings.disableTimeRanges[i][0], settings.disableTimeRanges[i - 1][0]), Math.max(settings.disableTimeRanges[i][1], settings.disableTimeRanges[i - 1][1])], settings.disableTimeRanges.splice(i, 1))
			}
			return settings
		}

		function _render(self) {
			var settings = self.data("timepicker-settings"),
				list = self.data("timepicker-list");
			if (list && list.length && (list.remove(), self.data("timepicker-list", !1)), settings.useSelect) {
				list = $("<select />", {
					"class": "ui-timepicker-select"
				});
				var wrapped_list = list
			} else {
				list = $("<ul />", {
					"class": "ui-timepicker-list"
				});
				var wrapped_list = $("<div />", {
					"class": "ui-timepicker-wrapper",
					tabindex: -1
				});
				wrapped_list.css({
					display: "none",
					position: "absolute"
				}).append(list)
			}
			if (settings.noneOption)
				if (settings.noneOption === !0 && (settings.noneOption = settings.useSelect ? "Time..." : "None"), $.isArray(settings.noneOption)) {
					for (var i in settings.noneOption)
						if (parseInt(i, 10) === i) {
							var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);
							list.append(noneElement)
						}
				} else {
					var noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);
					list.append(noneElement)
				}
			settings.className && wrapped_list.addClass(settings.className), null === settings.minTime && null === settings.durationTime || !settings.showDuration || (wrapped_list.addClass("ui-timepicker-with-duration"), wrapped_list.addClass("ui-timepicker-step-" + settings.step));
			var durStart = settings.minTime;
			"function" == typeof settings.durationTime ? durStart = _time2int(settings.durationTime()) : null !== settings.durationTime && (durStart = settings.durationTime);
			var start = null !== settings.minTime ? settings.minTime : 0,
				end = null !== settings.maxTime ? settings.maxTime : start + _ONE_DAY - 1;
			start >= end && (end += _ONE_DAY), end === _ONE_DAY - 1 && -1 !== settings.timeFormat.indexOf("H") && (end = _ONE_DAY);
			for (var dr = settings.disableTimeRanges, drCur = 0, drLen = dr.length, i = start; end >= i; i += 60 * settings.step) {
				var timeInt = i,
					timeString = _int2time(timeInt, settings.timeFormat);
				if (settings.useSelect) {
					var row = $("<option />", {
						value: timeString
					});
					row.text(timeString)
				} else {
					var row = $("<li />");
					row.data("time", 86400 >= timeInt ? timeInt : timeInt % 86400), row.text(timeString)
				}
				if ((null !== settings.minTime || null !== settings.durationTime) && settings.showDuration) {
					var durationString = _int2duration(i - durStart, settings.step);
					if (settings.useSelect) row.text(row.text() + " (" + durationString + ")");
					else {
						var duration = $("<span />", {
							"class": "ui-timepicker-duration"
						});
						duration.text(" (" + durationString + ")"), row.append(duration)
					}
				}
				drLen > drCur && (timeInt >= dr[drCur][1] && (drCur += 1),
					dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1] && (settings.useSelect ? row.prop("disabled", !0) : row.addClass("ui-timepicker-disabled"))), list.append(row)
			}
			if (wrapped_list.data("timepicker-input", self), self.data("timepicker-list", wrapped_list), settings.useSelect) list.val(_roundAndFormatTime(self.val(), settings)), list.on("focus", function() {
				$(this).data("timepicker-input").trigger("showTimepicker")
			}), list.on("blur", function() {
				$(this).data("timepicker-input").trigger("hideTimepicker")
			}), list.on("change", function() {
				_setTimeValue(self, $(this).val(), "select")
			}), self.hide().after(list);
			else {
				var appendTo = settings.appendTo;
				"string" == typeof appendTo ? appendTo = $(appendTo) : "function" == typeof appendTo && (appendTo = appendTo(self)), appendTo.append(wrapped_list), _setSelected(self, list), list.on("mousedown", "li", function() {
					self.off("focus.timepicker"), self.on("focus.timepicker-ie-hack", function() {
						self.off("focus.timepicker-ie-hack"), self.on("focus.timepicker", methods.show)
					}), _hideKeyboard(self) || self[0].focus(), list.find("li").removeClass("ui-timepicker-selected"), $(this).addClass("ui-timepicker-selected"), _selectValue(self) && (self.trigger("hideTimepicker"), wrapped_list.hide())
				})
			}
		}

		function _generateNoneElement(optionValue, useSelect) {
			var label, className, value;
			return "object" == typeof optionValue ? (label = optionValue.label, className = optionValue.className, value = optionValue.value) : "string" == typeof optionValue ? label = optionValue : $.error("Invalid noneOption value"), useSelect ? $("<option />", {
				value: value,
				"class": className,
				text: label
			}) : $("<li />", {
				"class": className,
				text: label
			}).data("time", value)
		}

		function _roundTime(seconds, settings) {
			if ($.isNumeric(seconds) || (seconds = _time2int(seconds)), null === seconds) return null;
			var offset = seconds % (60 * settings.step);
			return offset >= 30 * settings.step ? seconds += 60 * settings.step - offset : seconds -= offset, seconds
		}

		function _roundAndFormatTime(seconds, settings) {
			return seconds = _roundTime(seconds, settings), null !== seconds ? _int2time(seconds, settings.timeFormat) : void 0
		}

		function _generateBaseDate() {
			return new Date(1970, 1, 1, 0, 0, 0)
		}

		function _closeHandler(e) {
			var target = $(e.target),
				input = target.closest(".ui-timepicker-input");
			0 === input.length && 0 === target.closest(".ui-timepicker-wrapper").length && (methods.hide(), $(document).unbind(".ui-timepicker"))
		}

		function _hideKeyboard(self) {
			var settings = self.data("timepicker-settings");
			return (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && settings.disableTouchKeyboard
		}

		function _findRow(self, list, value) {
			if (!value && 0 !== value) return !1;
			var settings = self.data("timepicker-settings"),
				out = !1,
				halfStep = 30 * settings.step;
			return list.find("li").each(function(i, obj) {
				var jObj = $(obj);
				if ("number" == typeof jObj.data("time")) {
					var offset = jObj.data("time") - value;
					return Math.abs(offset) < halfStep || offset == halfStep ? (out = jObj, !1) : void 0
				}
			}), out
		}

		function _setSelected(self, list) {
			list.find("li").removeClass("ui-timepicker-selected");
			var timeValue = _time2int(_getTimeValue(self), self.data("timepicker-settings"));
			if (null !== timeValue) {
				var selected = _findRow(self, list, timeValue);
				if (selected) {
					var topDelta = selected.offset().top - list.offset().top;
					(topDelta + selected.outerHeight() > list.outerHeight() || 0 > topDelta) && list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight()), selected.addClass("ui-timepicker-selected")
				}
			}
		}

		function _formatValue(e) {
			if ("" !== this.value) {
				{
					var self = $(this);
					self.data("timepicker-list")
				}
				if (!self.is(":focus") || e && "change" == e.type) {
					var seconds = _time2int(this.value);
					if (null === seconds) return void self.trigger("timeFormatError");
					var settings = self.data("timepicker-settings"),
						rangeError = !1;
					if (null !== settings.minTime && seconds < settings.minTime ? rangeError = !0 : null !== settings.maxTime && seconds > settings.maxTime && (rangeError = !0), $.each(settings.disableTimeRanges, function() {
							return seconds >= this[0] && seconds < this[1] ? (rangeError = !0, !1) : void 0
						}), settings.forceRoundTime) {
						var offset = seconds % (60 * settings.step);
						offset >= 30 * settings.step ? seconds += 60 * settings.step - offset : seconds -= offset
					}
					var prettyTime = _int2time(seconds, settings.timeFormat);
					rangeError ? _setTimeValue(self, prettyTime, "error") && self.trigger("timeRangeError") : _setTimeValue(self, prettyTime)
				}
			}
		}

		function _getTimeValue(self) {
			return self.is("input") ? self.val() : self.data("ui-timepicker-value")
		}

		function _setTimeValue(self, value, source) {
			if (self.is("input")) {
				self.val(value);
				var settings = self.data("timepicker-settings");
				settings.useSelect && self.data("timepicker-list").val(_roundAndFormatTime(value, settings))
			}
			return self.data("ui-timepicker-value") != value ? (self.data("ui-timepicker-value", value), "select" == source ? self.trigger("selectTime").trigger("changeTime").trigger("change") : "error" != source && self.trigger("changeTime"), !0) : (self.trigger("selectTime"), !1)
		}

		function _keydownhandler(e) {
			var self = $(this),
				list = self.data("timepicker-list");
			if (!list || !list.is(":visible")) {
				if (40 != e.keyCode) return !0;
				methods.show.call(self.get(0)), list = self.data("timepicker-list"), _hideKeyboard(self) || self.focus()
			}
			switch (e.keyCode) {
				case 13:
					return _selectValue(self) && methods.hide.apply(this), e.preventDefault(), !1;
				case 38:
					var selected = list.find(".ui-timepicker-selected");
					return selected.length ? selected.is(":first-child") || (selected.removeClass("ui-timepicker-selected"), selected.prev().addClass("ui-timepicker-selected"), selected.prev().position().top < selected.outerHeight() && list.scrollTop(list.scrollTop() - selected.outerHeight())) : (list.find("li").each(function(i, obj) {
						return $(obj).position().top > 0 ? (selected = $(obj), !1) : void 0
					}), selected.addClass("ui-timepicker-selected")), !1;
				case 40:
					return selected = list.find(".ui-timepicker-selected"), 0 === selected.length ? (list.find("li").each(function(i, obj) {
						return $(obj).position().top > 0 ? (selected = $(obj), !1) : void 0
					}), selected.addClass("ui-timepicker-selected")) : selected.is(":last-child") || (selected.removeClass("ui-timepicker-selected"), selected.next().addClass("ui-timepicker-selected"), selected.next().position().top + 2 * selected.outerHeight() > list.outerHeight() && list.scrollTop(list.scrollTop() + selected.outerHeight())), !1;
				case 27:
					list.find("li").removeClass("ui-timepicker-selected"), methods.hide();
					break;
				case 9:
					methods.hide();
					break;
				default:
					return !0
			}
		}

		function _keyuphandler(e) {
			var self = $(this),
				list = self.data("timepicker-list");
			if (!list || !list.is(":visible")) return !0;
			if (!self.data("timepicker-settings").typeaheadHighlight) return list.find("li").removeClass("ui-timepicker-selected"), !0;
			switch (e.keyCode) {
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 65:
				case 77:
				case 80:
				case 186:
				case 8:
				case 46:
					_setSelected(self, list);
					break;
				default:
					return
			}
		}

		function _selectValue(self) {
			var settings = self.data("timepicker-settings"),
				list = self.data("timepicker-list"),
				timeValue = null,
				cursor = list.find(".ui-timepicker-selected");
			if (cursor.hasClass("ui-timepicker-disabled")) return !1;
			if (cursor.length && (timeValue = cursor.data("time")), null !== timeValue)
				if ("string" == typeof timeValue) self.val(timeValue);
				else {
					var timeString = _int2time(timeValue, settings.timeFormat);
					_setTimeValue(self, timeString, "select")
				}
			return !0
		}

		function _int2duration(seconds, step) {
			seconds = Math.abs(seconds);
			var hours, mins, minutes = Math.round(seconds / 60),
				duration = [];
			return 60 > minutes ? duration = [minutes, _lang.mins] : (hours = Math.floor(minutes / 60), mins = minutes % 60, 30 == step && 30 == mins && (hours += _lang.decimal + 5), duration.push(hours), duration.push(1 == hours ? _lang.hr : _lang.hrs), 30 != step && mins && (duration.push(mins), duration.push(_lang.mins))), duration.join(" ")
		}

		function _int2time(seconds, format) {
			if (null !== seconds) {
				var time = new Date(_baseDate.valueOf() + 1e3 * seconds);
				if (!isNaN(time.getTime())) {
					for (var hour, code, output = "", i = 0; i < format.length; i++) switch (code = format.charAt(i)) {
						case "a":
							output += time.getHours() > 11 ? _lang.pm : _lang.am;
							break;
						case "A":
							output += time.getHours() > 11 ? _lang.PM : _lang.AM;
							break;
						case "g":
							hour = time.getHours() % 12, output += 0 === hour ? "12" : hour;
							break;
						case "G":
							output += time.getHours();
							break;
						case "h":
							hour = time.getHours() % 12, 0 !== hour && 10 > hour && (hour = "0" + hour), output += 0 === hour ? "12" : hour;
							break;
						case "H":
							hour = time.getHours(), seconds === _ONE_DAY && (hour = 24), output += hour > 9 ? hour : "0" + hour;
							break;
						case "i":
							var minutes = time.getMinutes();
							output += minutes > 9 ? minutes : "0" + minutes;
							break;
						case "s":
							seconds = time.getSeconds(), output += seconds > 9 ? seconds : "0" + seconds;
							break;
						case "\\":
							i++, output += format.charAt(i);
							break;
						default:
							output += code
					}
					return output
				}
			}
		}

		function _time2int(timeString, settings) {
			if ("" === timeString) return null;
			if (!timeString || timeString + 0 == timeString) return timeString;
			if ("object" == typeof timeString) return 3600 * timeString.getHours() + 60 * timeString.getMinutes() + timeString.getSeconds();
			timeString = timeString.toLowerCase(); {
				var time;
				new Date(0)
			}
			if (time = timeString.match(/^([0-2]?[0-9])\W?([0-5][0-9])?\W?([0-5][0-9])?\s*([pa]?)m?$/), !time) return null;
			var hour = parseInt(1 * time[1], 10),
				ampm = time[4],
				hours = hour;
			ampm && (hours = 12 == hour ? "p" == time[4] ? 12 : 0 : hour + ("p" == time[4] ? 12 : 0));
			var minutes = 1 * time[2] || 0,
				seconds = 1 * time[3] || 0,
				timeInt = 3600 * hours + 60 * minutes + seconds;
			if (!ampm && settings && settings._twelveHourTime && settings.scrollDefault) {
				var delta = timeInt - settings.scrollDefault;
				0 > delta && delta >= _ONE_DAY / -2 && (timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY)
			}
			return timeInt
		}
		var _baseDate = _generateBaseDate(),
			_ONE_DAY = 86400,
			_lang = {
				am: "am",
				pm: "pm",
				AM: "AM",
				PM: "PM",
				decimal: ".",
				mins: "mins",
				hr: "hr",
				hrs: "hrs"
			},
			methods = {
				init: function(options) {
					return this.each(function() {
						var self = $(this),
							attributeOptions = [];
						for (var key in $.fn.timepicker.defaults) self.data(key) && (attributeOptions[key] = self.data(key));
						var settings = $.extend({}, $.fn.timepicker.defaults, attributeOptions, options);
						settings.lang && (_lang = $.extend(_lang, settings.lang)), settings = _parseSettings(settings), self.data("timepicker-settings", settings), self.addClass("ui-timepicker-input"), settings.useSelect ? _render(self) : (self.prop("autocomplete", "off"), self.on("click.timepicker focus.timepicker", methods.show), self.on("change.timepicker", _formatValue), self.on("keydown.timepicker", _keydownhandler), self.on("keyup.timepicker", _keyuphandler), _formatValue.call(self.get(0)))
					})
				},
				show: function(e) {
					var self = $(this),
						settings = self.data("timepicker-settings");
					if (e) {
						if (!settings.showOnFocus) return !0;
						e.preventDefault()
					}
					if (settings.useSelect) return void self.data("timepicker-list").focus();
					_hideKeyboard(self) && self.blur();
					var list = self.data("timepicker-list");
					if (!self.prop("readonly") && (list && 0 !== list.length && "function" != typeof settings.durationTime || (_render(self), list = self.data("timepicker-list")), !list.is(":visible"))) {
						methods.hide(), list.show();
						var listOffset = {};
						listOffset.left = "rtl" == settings.orientation ? self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css("marginLeft").replace("px", ""), 10) : self.offset().left + parseInt(list.css("marginLeft").replace("px", ""), 10), listOffset.top = self.offset().top + self.outerHeight(!0) + list.outerHeight() > $(window).height() + $(window).scrollTop() ? self.offset().top - list.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10) : self.offset().top + self.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10), list.offset(listOffset);
						var selected = list.find(".ui-timepicker-selected");
						if (selected.length || (_getTimeValue(self) ? selected = _findRow(self, list, _time2int(_getTimeValue(self))) : settings.scrollDefault && (selected = _findRow(self, list, settings.scrollDefault))), selected && selected.length) {
							var topOffset = list.scrollTop() + selected.position().top - selected.outerHeight();
							list.scrollTop(topOffset)
						} else list.scrollTop(0);
						return $(document).on("touchstart.ui-timepicker mousedown.ui-timepicker", _closeHandler), settings.closeOnWindowScroll && $(document).on("scroll.ui-timepicker", _closeHandler), self.trigger("showTimepicker"), this
					}
				},
				hide: function() {
					var self = $(this),
						settings = self.data("timepicker-settings");
					return settings && settings.useSelect && self.blur(), $(".ui-timepicker-wrapper:visible").each(function() {
						var list = $(this),
							self = list.data("timepicker-input"),
							settings = self.data("timepicker-settings");
						settings && settings.selectOnBlur && _selectValue(self), list.hide(), self.trigger("hideTimepicker")
					}), this
				},
				option: function(key, value) {
					return this.each(function() {
						var self = $(this),
							settings = self.data("timepicker-settings"),
							list = self.data("timepicker-list");
						if ("object" == typeof key) settings = $.extend(settings, key);
						else if ("string" == typeof key && "undefined" != typeof value) settings[key] = value;
						else if ("string" == typeof key) return settings[key];
						settings = _parseSettings(settings), self.data("timepicker-settings", settings), list && (list.remove(), self.data("timepicker-list", !1)), settings.useSelect && _render(self)
					})
				},
				getSecondsFromMidnight: function() {
					return _time2int(_getTimeValue(this))
				},
				getTime: function(relative_date) {
					var self = this,
						time_string = _getTimeValue(self);
					if (!time_string) return null;
					relative_date || (relative_date = new Date);
					var offset = _time2int(time_string),
						time = new Date(relative_date);
					return time.setHours(offset / 3600), time.setMinutes(offset % 3600 / 60), time.setSeconds(offset % 60), time.setMilliseconds(0), time
				},
				setTime: function(value) {
					var self = this,
						settings = self.data("timepicker-settings");
					if (settings.forceRoundTime) var prettyTime = _roundAndFormatTime(value, settings);
					else var prettyTime = _int2time(_time2int(value), settings.timeFormat);
					return _setTimeValue(self, prettyTime), self.data("timepicker-list") && _setSelected(self, self.data("timepicker-list")), this
				},
				remove: function() {
					var self = this;
					if (self.hasClass("ui-timepicker-input")) {
						var settings = self.data("timepicker-settings");
						return self.removeAttr("autocomplete", "off"), self.removeClass("ui-timepicker-input"), self.removeData("timepicker-settings"), self.off(".timepicker"), self.data("timepicker-list") && self.data("timepicker-list").remove(), settings.useSelect && self.show(), self.removeData("timepicker-list"), this
					}
				}
			};
		$.fn.timepicker = function(method) {
			return this.length ? methods[method] ? this.hasClass("ui-timepicker-input") ? methods[method].apply(this, Array.prototype.slice.call(arguments, 1)) : this : "object" != typeof method && method ? void $.error("Method " + method + " does not exist on jQuery.timepicker") : methods.init.apply(this, arguments) : this
		}, $.fn.timepicker.defaults = {
			className: null,
			minTime: null,
			maxTime: null,
			durationTime: null,
			step: 30,
			showDuration: !1,
			showOnFocus: !0,
			timeFormat: "g:ia",
			scrollDefault: null,
			selectOnBlur: !1,
			disableTouchKeyboard: !1,
			forceRoundTime: !1,
			appendTo: "body",
			orientation: "ltr",
			disableTimeRanges: [],
			closeOnWindowScroll: !1,
			typeaheadHighlight: !0,
			noneOption: !1
		}
	}),
	function() {
		for (var method, noop = function() {}, methods = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], length = methods.length, console = window.console = window.console || {}; length--;) method = methods[length], console[method] || (console[method] = noop)
	}();
var waitForScreenResize = function() {
	var timers = {};
	return function(callback, ms, uniqueId) {
		uniqueId || (uniqueId = "Don't call this twice without a uniqueId"), timers[uniqueId] && clearTimeout(timers[uniqueId]), timers[uniqueId] = setTimeout(callback, ms)
	}
}();
$(window).resize(function() {
		waitForScreenResize(function() {
			var breakpoint = determineBreakpoint();
			onScreenResize(breakpoint)
		}, 200, "main-resize")
	}), jQuery.fn.isLoaded = function() {
		return this.filter("img").filter(function() {
			return this.complete
		}).length > 0
	},
	function($, window, i) {
		$.fn.tinyNav = function(options) {
			var settings = $.extend({
				active: "selected",
				header: "",
				indent: "- ",
				label: ""
			}, options);
			return this.each(function() {
				i++;
				var $nav = $(this),
					namespace = "tinynav",
					namespace_i = namespace + i,
					l_namespace_i = ".l_" + namespace_i,
					$select = $("<select/>").attr("id", namespace_i).addClass(namespace + " " + namespace_i).addClass("form-control").addClass("visible-xs");
				if ($nav.is("ul,ol")) {
					"" !== settings.header && $select.append($("<option/>").text(settings.header));
					var options = "";
					$nav.addClass("l_" + namespace_i).find("a").each(function() {
						options += '<option value="' + $(this).attr("href") + '">';
						var j;
						for (j = 0; j < $(this).parents("ul, ol").length - 1; j++) options += settings.indent;
						options += $(this).text() + "</option>"
					}), $select.append(options), settings.header || $select.find(":eq(" + $(l_namespace_i + " li").index($(l_namespace_i + " li." + settings.active)) + ")").attr("selected", !0), $select.change(function() {
						window.location.href = $(this).val()
					}), $(l_namespace_i).after($select), settings.label && $select.before($("<label/>").attr("for", namespace_i).addClass(namespace + "_label " + namespace_i + "_label").append(settings.label))
				}
			})
		}
	}(jQuery, this, 0),
	function($) {
		$.fn.equalHeights = function(options) {
			var settings = $.extend({
					container: this,
					children: "> *"
				}, options),
				breakpoint = determineBreakpoint();
			return "sm" == breakpoint || "md" == breakpoint || "lg" == breakpoint ? $(settings.container).each(function() {
				$(this).find(settings.children).css({
					"min-height": 1
				});
				var currentTallest = 0;
				$(this).find(settings.children).each(function() {
					$(this).height() > currentTallest && (currentTallest = $(this).height())
				}), $(this).find(settings.children).css({
					"min-height": currentTallest + 1
				})
			}) : $(settings.container).find(settings.children).css({
				"min-height": 1
			}), this
		}
	}(jQuery),
	function($) {
		$.fn.resourceFilter = function(options) {
			function resetFilters() {
				$(settings.searchInput).val(""), $(settings.self).find(".nav-tabs").show(), $(settings.self).removeClass(settings.filteredClass).find(".tab-pane").removeClass(settings.openClass), $(settings.self).find(settings.list).find("li").removeClass(settings.hideClass), $(settings.self).find(settings.list).find("li > ul").removeClass(settings.hideClass), $("." + settings.listClass + "-alert").addClass(settings.hideClass)
			}
			var settings = $.extend({
				self: this,
				tabs: ".tab-pane",
				list: ".list-unstyled",
				filteredClass: "filtered",
				listClass: "resource-list",
				showClass: "show",
				hideClass: "hide",
				openClass: "open",
				searchInput: "#resource-list-search"
			}, options);
			return $(settings.searchInput).siblings("a").click(function(e) {
				e.preventDefault, resetFilters()
			}), $(this).on("keyup", settings.searchInput, function(e) {
				27 == e.keyCode && $(this).val("");
				var searchString = $(this).val(),
					matchRegex = new RegExp(searchString, "gi"),
					linksFound = !1;
				searchString.length > 0 ? ($(settings.self).addClass(settings.filteredClass).find(".nav-tabs").hide(), $(settings.self).find(settings.tabs).addClass(settings.openClass).each(function() {
					var tabLinksFound = !1;
					$(this).find(settings.list).find("li").removeClass(settings.showClass), $(this).find(settings.list).find("a, span, strong").each(function() {
						$(this).text().match(matchRegex) ? ($(this).parents("li").removeClass(settings.hideClass), $(this).parent("li").has("ul").addClass(settings.showClass), tabLinksFound = !0, linksFound = !0) : $(this).parent("li").text().match(matchRegex) || $(this).parent("li").addClass(settings.hideClass)
					}), tabLinksFound || $(this).removeClass(settings.openClass)
				}), 0 == linksFound ? $("." + settings.listClass + "-alert").removeClass(settings.hideClass) : $("." + settings.listClass + "-alert").addClass(settings.hideClass)) : resetFilters()
			}), this
		}
	}(jQuery), $.fn.modal.Constructor.prototype.enforceFocus = function() {
		modal_this = this, $(document).on("focusin.modal", function(e) {
			modal_this.$element[0] === e.target || modal_this.$element.has(e.target).length || $(e.target.parentNode).hasClass("cke_dialog_ui_input_select") || $(e.target.parentNode).hasClass("cke_dialog_ui_input_text") || modal_this.$element.focus()
		})
	}, $(document).ready(function() {
		$("#news-main").find(".news-primary").bxSlider({
			auto: !0,
			autoHover: !0,
			captions: !0,
			controls: !1,
			mode: "fade"
		}), $("a.my-link").each(function() {
			prependFavicon(this)
		}), $(".my-links-slides").bxSlider({
			adaptiveHeight: !0,
			controls: !1,
			infiniteLoop: !1
		}), $(".intro-slider").bxSlider({
			adaptiveHeight: !0,
			controls: !1,
			infiniteLoop: !1
		}), $("select.chosen").chosen({
			allow_single_deselect: !0,
			width: "100%",
			disable_search_threshold: 10
		}), $(".chosen-container .chosen-results").on("touchend", function(event) {
			event.stopPropagation(), event.preventDefault()
		}), $(".tip").popover({
			trigger: "hover focus click"
		}), $(".ellipsis").ellipsis(), $("[data-transport]").transport({
			xs: "(max-width: 479px)",
			sm: "(max-width: 767px)",
			md: "(max-width: 991px)",
			lg: "(max-width: 1199px)"
		}), onScreenResize(determineBreakpoint()), isAndroid() && ($(".hidden-android").hide(), $("html").addClass("android")), isBlackberry() && ($(".hidden-blackberry").hide(), $("html").addClass("android")), isIos() && ($(".hidden-ios").hide(), $("html").addClass("ios")), $('a[rel="external"]').attr("target", "_blank"), $("#resource-list").resourceFilter(), $getStartedLink = $("#get-started-link"), $getStarted = $("#get-started"), getStartedShowText = $getStartedLink.html(), getStartedHideText = $getStartedLink.data("alttext") + ' <span class="icon-collapse"></span>', $getStartedLink.click(function(e) {
			e.preventDefault(), $getStarted.slideToggle("fast", function() {
				$getStartedLink.html($getStarted.is(":visible") ? getStartedHideText : getStartedShowText)
			})
		})
	}), $(".js-jump-to-top").bind("click", function(e) {
		e.preventDefault(), window.scroll(0, 0)
	}), "undefined" != typeof Sfdc && (Sfdc.ns("SfdcApp.ChatterProfilePhotoSection"), SfdcApp.ChatterProfilePhotoSection = function() {
		return {
			showHideBadgeAndPhotoLinks: function(b) {
				var a = Sfdc.get("photoSection");
				b ? Sfdc.Dom.addClass(a, "hoverOrFocus") : Sfdc.Dom.removeClass(a, "hoverOrFocus")
			}
		}
	}(), function() {
		Sfdc.provide("SfdcApp.ChatterProfileSection", function() {
			var b = {};
			return {
				init: function(a, g, c, d, e, f) {
					if (!b[a]) {
						c = UserContext.isAccessibleMode ? new CollaborationAccessibleDialog(a, c, d, e, f) : new NonaccessibleDialog(a, c, d, e, f), b[a] = c;
						var h = function() {
							SfdcApp.ChatterProfileSection.showDialog(a)
						};
						Sfdc.each(Sfdc.select(g), function(a) {
							Sfdc.on(a, "click", h)
						})
					}
				},
				showDialog: function(a) {
					b[a] && (window.checkSessionTimeout && checkSessionTimeout(), b[a].display())
				}
			}
		}())
	}(), Sfdc.ns("SfdcApp.ChatterGroupAddRemoveMemberOverlay"), SfdcApp.ChatterGroupAddRemoveMemberOverlay = function() {
		function f(a) {
			return Sfdc.Dom.getParent(a, ".groupManagementContainer")
		}

		function k(a) {
			return Sfdc.get(".search", f(a))
		}

		function s(a) {
			return Sfdc.get(".content", f(a))
		}

		function t() {
			return LC.getLabel("ChatterGroups", "groupsOverlay_searchdefault")
		}

		function y(a) {
			h != l && (a = Sfdc.get(".extras", f(a)), ("requests" == h || "requests" == l) && u(Sfdc.get(".requests", a)), ("member" == h || "member" == l) && u(Sfdc.get(".member", a)), ("all" == h || "all" == l) && u(Sfdc.get(".everyone", a)))
		}

		function u(a) {
			var c = Sfdc.get(".visible", a);
			a = Sfdc.get(".invisible", a), Sfdc.Dom.removeClass(c, "visible"), Sfdc.Dom.addClass(c, "invisible"), Sfdc.Dom.removeClass(a, "invisible"), Sfdc.Dom.addClass(a, "visible")
		}

		function v(a, c) {
			var b = Sfdc.get(".paginator .lastPage", a),
				d = Sfdc.get(".paginator .notLastPage", a);
			c ? (Sfdc.Dom.hideByDisplay(b), Sfdc.Dom.show(d)) : (Sfdc.Dom.hideByDisplay(d), Sfdc.Dom.show(b))
		}

		function n(a) {
			var c = Sfdc.get(".paginator .notFirstPage", a);
			a = Sfdc.get(".paginator .firstPage", a), 1 == e ? (Sfdc.Dom.hideByDisplay(c), Sfdc.Dom.show(a)) : (Sfdc.Dom.hideByDisplay(a), Sfdc.Dom.show(c))
		}

		function p(a) {
			var c = {
				filter: h,
				page: e
			};
			return chatter.getToolbox(), a = k(a), a.value != t() && (c.search = a.value), c
		}

		function w(a) {
			a.value = t(), Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", f(a))), Sfdc.Dom.hasClass(a, "unfocus") || Sfdc.Dom.addClass(a, "unfocus")
		}

		function x() {
			var a = Sfdc.select("input.acceptAll")[0],
				c = Sfdc.String.getIntValue(Sfdc.get(".groupmemberrequestcount").innerHTML, 10),
				b = Sfdc.String.getIntValue(a.getAttribute("count_page_request"), 10);
			a.setAttribute("count_total_request", c), a.setAttribute("value", LC.getLabel("ChatterGroups", "membership_admin_acceptall", b, c)), a.setAttribute("title", LC.getLabel("ChatterGroups", "membership_admin_acceptall_title", b, c))
		}

		function q(a, c, b) {
			m && clearTimeout(m);
			var d = f(a),
				e = Sfdc.get(".mask", d);
			Sfdc.Dom.show(e);
			var r = {
				refresh: "",
				search: b.search,
				page: b.page,
				filter: b.filter
			};
			b.hasNext && b.userIds && b.requestIds && (r.hasNext = b.hasNext, r.userIds = b.userIds, r.requestIds = b.requestIds), chatter.getToolbox().get({
				url: "/ui/groups/" + c + "/usermanagement",
				params: r,
				success: function(c, f) {
					b.onSuccess && b.onSuccess(f), Sfdc.Dom.updateHTML(s(a), f.html), v(d, f.hasNextPage), n(d), "requests" == h && (g.processPayload(f.payload), x()), Sfdc.Dom.hideByDisplay(e)
				},
				failure: function() {
					Sfdc.Dom.hideByDisplay(e)
				}
			})
		}
		var m, e = 1,
			h = "all",
			l = h,
			g = {
				processPayload: function(a) {
					a && a.pageList && (g.requestPageList = a.pageList)
				},
				setRequestConfig: function(a) {
					e = 1, l = h, h = a
				},
				resetRequestConfig: function() {
					g.setRequestConfig("all")
				},
				onSearchClear: function(a, c) {
					var b = k(a);
					b.value = "", g.search(a, c), w(b)
				},
				onSearchFocus: function(a) {
					a = k(a), Sfdc.Dom.removeClass(a, "unfocus"), a.value == t() && (a.value = "")
				},
				onSearchUnfocus: function(a) {
					a = k(a);
					var c = a.value;
					(null === c || 0 === c.length) && w(a)
				},
				getCurrentFilter: function() {
					return h
				},
				filter: function(a, c, b) {
					var d = p(a);
					d.search = "", d.filter = b, d.page = 1, d.onSuccess = function(c) {
						g.setRequestConfig(b), w(k(a)), y(a);
						var d = Sfdc.get(".extras", f(a));
						c.requestCount && Sfdc.each(Sfdc.select(".groupmemberrequestcount", d), function(a) {
							a.innerHTML = c.requestCount
						}), c.memberCount && Sfdc.each(Sfdc.select(".groupmembercount", d), function(a) {
							a.innerHTML = c.memberCount
						})
					}, q(a, c, d)
				},
				search: function(a, c) {
					var b = k(a),
						d = b.value;
					0 < d.length ? Sfdc.Dom.show(Sfdc.get(".quickfindClear", f(b))) : Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", f(b))), (1 != d.length || SfdcApp.ChatterGroupUtil.isCJK(d)) && (b = p(a), b.filter = "all", b.page = 1, b.onSuccess = function() {
						g.resetRequestConfig(), y(a)
					}, q(a, c, b))
				},
				onSearchKeyUp: function(a, c, b) {
					m && clearTimeout(m), a.keyCode == KEY_ENTER ? g.search(c, b) : a.keyCode != KEY_TAB && (m = setTimeout(function() {
						g.search(c, b)
					}, 750))
				},
				prevPage: function(a, c) {
					var b = f(a);
					if (1 == e) n(b);
					else if (e -= 1, "requests" == h) {
						var d = s(a);
						g.requestPageList[e] = d.innerHTML, Sfdc.Dom.updateHTML(d, g.requestPageList[e - 1]), x(), v(b, !0), n(b)
					} else b = p(a), q(a, c, b)
				},
				nextPage: function(a, c) {
					e += 1;
					var b = p(a);
					if ("requests" == h) {
						var d = g.requestPageList[e - 1],
							k = s(a);
						if (g.requestPageList[e - 2] = k.innerHTML, !d.userIds || !d.requestIds) return Sfdc.Dom.updateHTML(k, d), x(), b = f(a), v(b, void 0 !== g.requestPageList[e]), void n(b);
						b.hasNext = g.requestPageList[e] ? "true" : "false", b.userIds = d.userIds, b.requestIds = d.requestIds
					}
					q(a, c, b)
				},
				closeDialog: function(a) {
					return window.sfdcPage.getDialogById(a).cancel()
				},
				closeDialogNoRefresh: function(a) {
					SfdcApp.ChatterGroupMembership.disableRefreshOnClose(), this.closeDialog(a)
				}
			};
		return g
	}(), Sfdc.provide("SfdcApp.ChatterGroupAnnouncement", {
		dismissAnnouncement: function(a, b) {
			chatter.getToolbox().post({
				url: a + ";delete",
				params: b,
				success: function() {
					var a = Sfdc.get("announcementPanel");
					Sfdc.Dom.updateHTML(a, "")
				}
			})
		}
	}), Sfdc.ns("SfdcApp.ChatterGroupChangeRolesOverlay"), SfdcApp.ChatterGroupChangeRolesOverlay = function() {
		function g(a) {
			return Sfdc.Dom.getParent(a, ".groupRolesContainer")
		}

		function s() {
			return LC.getLabel("ChatterGroups", "groupsOverlay_searchdefault")
		}

		function d(a) {
			return Sfdc.get(".search", g(a))
		}

		function n(a) {
			var c = {
				filter: p,
				page: e
			};
			return a = d(a), a.value != s() && (c.search = a.value), c
		}

		function u(a) {
			a = Sfdc.get(".filter", g(a)), v(Sfdc.get(".member", a)), v(Sfdc.get(".manager", a))
		}

		function v(a) {
			var c = Sfdc.get(".visible", a);
			a = Sfdc.get(".invisible", a), Sfdc.Dom.removeClass(c, "visible"), Sfdc.Dom.addClass(c, "invisible"), Sfdc.Dom.removeClass(a, "invisible"), Sfdc.Dom.addClass(a, "visible")
		}

		function q(a, c, b) {
			var h = chatter.getToolbox();
			k && clearTimeout(k);
			var l = g(a),
				f = Sfdc.get(".mask", l);
			Sfdc.Dom.show(f), h.get({
				url: "/ui/groups/" + c + "/changeroles",
				params: {
					refresh: "",
					filter: b.filter,
					page: b.page,
					search: b.search
				},
				success: function(c, h) {
					b.onSuccess && b.onSuccess(), Sfdc.Dom.updateHTML(Sfdc.get(".content", g(a)), h.html);
					var r = h.hasNextPage,
						d = Sfdc.get(".paginator .lastPage", l),
						k = Sfdc.get(".paginator .notLastPage", l);
					r ? (Sfdc.Dom.hideByDisplay(d), Sfdc.Dom.show(k)) : (Sfdc.Dom.hideByDisplay(k), Sfdc.Dom.show(d)), r = Sfdc.get(".paginator .notFirstPage", l), d = Sfdc.get(".paginator .firstPage", l), 1 == e ? (Sfdc.Dom.hideByDisplay(r), Sfdc.Dom.show(d)) : (Sfdc.Dom.hideByDisplay(d), Sfdc.Dom.show(r)), Sfdc.Dom.hideByDisplay(f)
				},
				failure: function(a) {
					Sfdc.Dom.hideByDisplay(f), 403 == a.status && h.refresh(), b.onFailure && b.onFailure()
				}
			})
		}

		function t(a) {
			a.value = s(), Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", g(a))), Sfdc.Dom.hasClass(a, "unfocus") || Sfdc.Dom.addClass(a, "unfocus")
		}
		var k, e = 1,
			p = "member",
			m = {
				resetRequestConfig: function() {
					e = 1, p = "member"
				},
				closeDialog: function(a) {
					return window.sfdcPage.getDialogById(a).cancel()
				},
				filter: function(a, c, b) {
					p = b, e = 1, b = n(a), b.search = "", b.onSuccess = function() {
						var b = d(a);
						t(b), u(a)
					}, q(a, c, b)
				},
				nextPage: function(a, c) {
					e += 1;
					var b = n(a);
					q(a, c, b)
				},
				onSearchClear: function(a, c) {
					var b = d(a);
					b.value = "", m.search(a, c), t(b)
				},
				onSearchFocus: function(a) {
					a = d(a), Sfdc.Dom.removeClass(a, "unfocus"), a.value == s() && (a.value = "")
				},
				onSearchKeyUp: function(a, c, b) {
					k && clearTimeout(k), 13 == a.keyCode ? m.search(c, b) : 9 != a.keyCode && (k = setTimeout(function() {
						m.search(c, b)
					}, 750))
				},
				onSearchUnfocus: function(a) {
					a = d(a);
					var c = a.value;
					(null === c || 0 === c.length) && t(a)
				},
				prevPage: function(a, c) {
					e = e > 1 ? e - 1 : e;
					var b = n(a);
					q(a, c, b)
				},
				search: function(a, c) {
					var b = d(a),
						h = b.value;
					0 < h.length ? Sfdc.Dom.show(Sfdc.get(".quickfindClear", g(b))) : Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", g(b))), (1 != h.length || SfdcApp.ChatterGroupUtil.isCJK(h)) && (b = n(a), b.filter = "member", b.page = 1, b.onSuccess = function() {
						"member" != p && u(a), m.resetRequestConfig()
					}, q(a, c, b))
				},
				toggleHelpVisibility: function(a) {
					a ? Sfdc.Dom.show(Sfdc.get("#groupRolesOverlayHelp")) : Sfdc.Dom.hideByDisplay(Sfdc.get("#groupRolesOverlayHelp"))
				},
				toggleManager: function(a, c) {
					var b = a.value,
						d = a.checked ? "a" : "s",
						e = UserContext.userId == b && "s" == d;
					if (e && !confirm(LC.getLabel("ChatterGroups", "roles_warnManagerSelfRemoval"))) a.checked = !0;
					else {
						Perf.mark("editGroupMember");
						var f = chatter.getToolbox();
						f.disable(a), f.post({
							url: "/groups/" + c + "/members;edit",
							params: {
								userId: b,
								role: d
							},
							failure: function(b, c) {
								if (f.enable(a), 403 == b.status && f.refresh(), c.errors) {
									if (a.checked = !a.checked, c.errors.groupMemberOverlayError) {
										var d = Sfdc.get("#errorHeaderDiv");
										Sfdc.Dom.updateHTML(d, c.errors.groupMemberOverlayError), Sfdc.Dom.show(d)
									}
									c.errors.groupMemberErrors && (d = Sfdc.Dom.getPrevious(Sfdc.Dom.getParent(a, "td"), "td"), d = Sfdc.get(".zen-errorMessage", d), Sfdc.Dom.updateHTML(d, c.errors.groupMemberErrors), Sfdc.Dom.show(d))
								}
							},
							success: function(b, c) {
								e ? f.refresh() : (f.enable(a), Sfdc.Dom.hideByDisplay(Sfdc.get("#errorHeaderDiv")), g(a), Sfdc.each(Sfdc.select(".managercount", g(a)), function(a) {
									Sfdc.Dom.updateHTML(a, c.managers)
								}))
							}
						})
					}
				}
			};
		return m
	}(), GroupPanelAccessibleUrlDialog = function(a) {
		var b = this;
		this.id = a.dialogId, this.title = a.dialogTitle, this.url = a.url, this.subjectId = a.subjectId, this.refreshUrl = a.refreshUrl, this.config = a, this.open = function(a) {
			Perf.mark(OverlayDialog.LOAD_MARK);
			var c;
			a && a.params && (c = a.params), chatter.getToolbox().get({
				url: b.url,
				params: c,
				success: function(c, d) {
					Sfdc.Dom.updateHTML(Sfdc.get(b.getContentId()), d.html), b.show(), a && a.onSuccess && a.onSuccess(d)
				}
			}), Perf.endMark(OverlayDialog.LOAD_MARK)
		}
	}, GroupPanelAccessibleUrlDialog.prototype = new OverlayDialog, GroupPanelAccessibleUrlDialog.prototype.hide = function() {
		OverlayDialog.prototype.hide.apply(this, []), SfdcApp.ChatterGroupMembership.isDirty() && !SfdcApp.ChatterGroupMembership.isDisableRefresOnClose() && (this.refreshUrl ? chatter.getToolbox().navigateTo(this.refreshUrl) : chatter.getToolbox().refresh()), this.config.onHide && this.config.onHide()
	}, Sfdc.ns("SfdcApp.ChatterGroupMemberListOverlay"), SfdcApp.ChatterGroupMemberListOverlay = function() {
		function d(a) {
			return Sfdc.get(".search", l(a))
		}

		function l(a) {
			return Sfdc.Dom.getParent(a, ".groupMemberContainer")
		}

		function p() {
			return LC.getLabel("ChatterGroups", "findMembers")
		}

		function h(a) {
			var c = {
				filter: q,
				page: e
			};
			return a = d(a), a.value != p() && (c.search = a.value), c
		}

		function r(a) {
			a.value = p(), Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", l(a))), Sfdc.Dom.hasClass(a, "unfocus") || Sfdc.Dom.addClass(a, "unfocus")
		}

		function m(a, c, b) {
			g && clearTimeout(g);
			var f = Sfdc.get(".mask", l(a));
			Sfdc.Dom.show(f), chatter.getToolbox().get({
				url: "/ui/groups/" + c + "/memberoverlay",
				params: {
					refresh: "",
					search: b.search,
					page: b.page,
					filter: b.filter
				},
				success: function(b, c) {
					Sfdc.Dom.updateHTML(Sfdc.get(".groupMembersContainer .content"), c.html);
					var k = l(a),
						d = c.hasNextPage,
						g = Sfdc.get(".paginator .lastPage", k),
						h = Sfdc.get(".paginator .notLastPage", k);
					d ? (Sfdc.Dom.hideByDisplay(g), Sfdc.Dom.show(h)) : (Sfdc.Dom.hideByDisplay(h), Sfdc.Dom.show(g)), d = Sfdc.get(".paginator .notFirstPage", k), k = Sfdc.get(".paginator .firstPage", k), 1 == e ? (Sfdc.Dom.hideByDisplay(d), Sfdc.Dom.show(k)) : (Sfdc.Dom.hideByDisplay(k), Sfdc.Dom.show(d)), Sfdc.Dom.hideByDisplay(f)
				},
				failure: function() {
					Sfdc.Dom.hideByDisplay(f)
				}
			})
		}
		var g, e = 1,
			q = "member",
			n = {
				closeDialog: function(a, c) {
					return (a ? window.opener ? window.opener : window.parent : window).sfdcPage.getDialogById(c).cancel()
				},
				filter: function(a, c) {
					var b = a.value;
					e = 1, q = b, r(d(a)), b = h(a), m(a, c, b)
				},
				prevPage: function(a, c) {
					e = e > 1 ? e - 1 : e;
					var b = h(a);
					m(a, c, b)
				},
				nextPage: function(a, c) {
					e += 1;
					var b = h(a);
					m(a, c, b)
				},
				onSearchFocus: function(a) {
					a = d(a), Sfdc.Dom.removeClass(a, "unfocus"), a.value == p() && (a.value = "")
				},
				onSearchUnfocus: function(a) {
					a = d(a);
					var c = a.value;
					(null === c || 0 === c.length) && r(a)
				},
				onSearchClear: function(a, c) {
					var b = d(a);
					b.value = "", n.search(a, c), r(b)
				},
				onSearchKeyUp: function(a, c, b) {
					g && clearTimeout(g), a.keyCode == KEY_ENTER ? n.search(c, b) : a.keyCode != KEY_TAB && (g = setTimeout(function() {
						n.search(c, b)
					}, 750))
				},
				search: function(a, c) {
					var b = d(a),
						f = b.value,
						b = l(b);
					if (0 < f.length ? Sfdc.Dom.show(Sfdc.get(".quickfindClear", b)) : Sfdc.Dom.hideByDisplay(Sfdc.get(".quickfindClear", b)), 1 != f.length || SfdcApp.ChatterGroupUtil.isCJK(f)) {
						for (e = 1, q = "member", f = h(a), b = Sfdc.get(".filterSelect", b), index = 0; index < b.length; index++) "member" == b[index].value && (b.selectedIndex = index);
						m(a, c, f)
					}
				}
			};
		return n
	}(), function() {
		function h(a, b) {
			return a ? Sfdc.get(".chatterListOverlay") : Sfdc.get(".chatterListOverlay", Sfdc.get(b))
		}

		function f(a, b, e, c, d) {
			var f = Sfdc.get(".chatterListOverlayContents", h(a, b)),
				g = chatter.getToolbox();
			g.get({
				url: e,
				params: {
					keyPrefix: c,
					pageNumber: d,
					dialogId: b,
					refresh: ""
				},
				success: function(b, a) {
					Sfdc.Dom.updateHTML(f, a.html), g.fixIE7Haslayout(f)
				}
			})
		}
		Sfdc.provide("SfdcApp.ChatterGroupRecordsListOverlay", {
			prevPage: function(a, b, e, c, d) {
				f(a, b, e, c, d - 1)
			},
			nextPage: function(a, b, e, c, d) {
				f(a, b, e, c, d + 1)
			},
			filter: function(a, b, e) {
				var c = Sfdc.get(".picklistFilter", h(a, b));
				f(a, b, e, c.value, 0)
			},
			removeRecord: function(a, b, e, c, d, h, g) {
				chatter.getToolbox().post({
					url: c + ";delete",
					params: g,
					success: function() {
						f(a, b, e, d, h)
					}
				})
			},
			updateRecord: function(a, b) {
				chatter.getToolbox().post({
					url: "/groups/" + b.groupId + "/record;edit",
					params: b,
					success: function(b, c) {
						Sfdc.Dom.getParent(a).innerHTML = c.html
					}
				})
			},
			closeDialog: function(a) {
				chatter.getToolbox().get({
					url: a,
					success: function(b, a) {
						var c = Sfdc.get("recordsPanel"),
							d = c.ownerDocument.createElement("div");
						d.innerHTML = Sfdc.String.trim(a.html), c.parentNode.insertBefore(d.firstChild, c), Sfdc.Dom.removeChild(c)
					}
				})
			}
		})
	}(), Sfdc.ns("SfdcApp.ChatterGroupUtil"), SfdcApp.ChatterGroupUtil = function() {
		return {
			isCJK: function(a) {
				return /^[\u1100-\u1200|\u3040-\uFB00|\uFE30-\uFE50|\uFF00-\uFFF0]+$/.test(a)
			}
		}
	}(), GroupEmailSettingsMink = function(a, c, b, d) {
		this.menuButton = new MenuButtonRounded(a, c, 6), this.id = a, this.currentDigest = b, this.groupId = d
	}, GroupEmailSettingsMink.prototype.hide = function() {
		this.menuButton.hide()
	}, GroupEmailSettingsMink.prototype.switchSettings = function(a, c) {
		function b(a, b) {
			Sfdc.get("emailSettingsMink").title = a, Sfdc.Dom.updateHTML(Sfdc.get("emailSettingsMink" + MenuButtonElement.LABEL), a), Sfdc.Dom.updateHTML(Sfdc.select(".firstMenuItem .firstMenuText")[0], a), Sfdc.Dom.removeClass(Sfdc.select(".emailSettings .menuButtonMenu a.selected")[0], "selected"), Sfdc.Dom.addClass(Sfdc.select(".emailSettings .menuButtonMenu ." + b)[0], "selected")
		}
		this.menuButton.hide();
		var d = this.currentDigest,
			e = Sfdc.get("emailSettingsMink").title;
		this.currentDigest != a && (this.currentDigest = a, HelpBubble.hideBubble("changeGroupEmailSettingsHelpBubble"), chatter.getToolbox().post({
			url: "/groups/" + this.groupId + "/emailsettings;edit",
			params: {
				emailSetting: a
			},
			failure: function() {
				b(e, d)
			}
		}), b(c, a))
	});
